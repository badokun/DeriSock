// --------------------------------------------------------------------------
// <auto-generated>
//      This code was generated by a tool.
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------
#pragma warning disable CS1591
#nullable enable
namespace DeriSock.Model {
  using System;
  using DeriSock.Converter;
  
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class WithdrawalEntry {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, <c>null</c> when not confirmed</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmed_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ConfirmedTimestamp {
      get {
        return this._ConfirmedTimestamp;
      }
      set {
        this._ConfirmedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Fee in currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal id in Deribit system</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Id of priority level</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("priority")]
    public decimal Priority {
      get {
        return this._Priority;
      }
      set {
        this._Priority = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal state, allowed values : <c>unconfirmed</c>, <c>confirmed</c>, <c>cancelled</c>, <c>completed</c>, <c>interrupted</c>, <c>rejected</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Transaction id in proper format for currency, <c>null</c> if id is not available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("transaction_id")]
    public string TransactionId {
      get {
        return this._TransactionId;
      }
      set {
        this._TransactionId = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ConfirmedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Priority;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TransactionId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DepositEntry {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("received_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ReceivedTimestamp {
      get {
        return this._ReceivedTimestamp;
      }
      set {
        this._ReceivedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Deposit state, allowed values : <c>pending</c>, <c>completed</c>, <c>rejected</c>, <c>replaced</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Transaction id in proper format for currency, <c>null</c> if id is not available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("transaction_id")]
    public string TransactionId {
      get {
        return this._TransactionId;
      }
      set {
        this._TransactionId = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ReceivedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TransactionId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TransactionLogEntry {
    
    /// <summary>
    /// <para>The amount of traded contracts</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Cash balance after the transaction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("balance")]
    public decimal Balance {
      get {
        return this._Balance;
      }
      set {
        this._Balance = value;
      }
    }
    
    /// <summary>
    /// <para>For futures and perpetual contracts: Realized session PNL (since last settlement). For options: the amount paid or received for the options traded.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("cashflow")]
    public decimal Cashflow {
      get {
        return this._Cashflow;
      }
      set {
        this._Cashflow = value;
      }
    }
    
    /// <summary>
    /// <para>Change in cash balance. For trades: fees and options premium paid/received. For settlement: Futures session PNL and perpetual session funding.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("change")]
    public decimal Change {
      get {
        return this._Change;
      }
      set {
        this._Change = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Updated equity value after the transaction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("equity")]
    public decimal Equity {
      get {
        return this._Equity;
      }
      set {
        this._Equity = value;
      }
    }
    
    /// <summary>
    /// <para>Unique identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Additional information regarding transaction. Strongly dependent on the log entry type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("info")]
    public object Info {
      get {
        return this._Info;
      }
      set {
        this._Info = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Actual funding rate of trades and settlements on perpetual instruments</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_pl")]
    public decimal InterestPl {
      get {
        return this._InterestPl;
      }
      set {
        this._InterestPl = value;
      }
    }
    
    /// <summary>
    /// <para>Market price during the trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Updated position size after the transaction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("position")]
    public decimal Position {
      get {
        return this._Position;
      }
      set {
        this._Position = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement/delivery price or the price level of the traded contracts</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Currency symbol associated with the <c>price</c> field value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_currency")]
    public string PriceCurrency {
      get {
        return this._PriceCurrency;
      }
      set {
        this._PriceCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Indicator informing whether the cashflow is waiting for settlement or not</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_as_cashflow")]
    public bool ProfitAsCashflow {
      get {
        return this._ProfitAsCashflow;
      }
      set {
        this._ProfitAsCashflow = value;
      }
    }
    
    /// <summary>
    /// <para>Session realized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_rpl")]
    public decimal SessionRpl {
      get {
        return this._SessionRpl;
      }
      set {
        this._SessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>Session unrealized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_upl")]
    public decimal SessionUpl {
      get {
        return this._SessionUpl;
      }
      set {
        this._SessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>One of: <c>short</c> or <c>long</c> in case of settlements, <c>close sell</c> or <c>close buy</c> in case of deliveries, <c>open sell</c>, <c>open buy</c>, <c>close sell</c>, <c>close buy</c> in case of trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("side")]
    public string Side {
      get {
        return this._Side;
      }
      set {
        this._Side = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Total session funding rate</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_interest_pl")]
    public decimal TotalInterestPl {
      get {
        return this._TotalInterestPl;
      }
      set {
        this._TotalInterestPl = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Transaction category/type. The most common are: <c>trade</c>, <c>deposit</c>, <c>withdrawal</c>, <c>settlement</c>, <c>delivery</c>, <c>transfer</c>, <c>swap</c>, <c>correction</c>. New types can be added any time in the future</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Unique user identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("user_id")]
    public int UserId {
      get {
        return this._UserId;
      }
      set {
        this._UserId = value;
      }
    }
    
    /// <summary>
    /// <para>Trade role of the user: maker or taker</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("user_role")]
    public string UserRole {
      get {
        return this._UserRole;
      }
      set {
        this._UserRole = value;
      }
    }
    
    /// <summary>
    /// <para>Sequential identifier of user transaction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("user_seq")]
    public int UserSeq {
      get {
        return this._UserSeq;
      }
      set {
        this._UserSeq = value;
      }
    }
    
    /// <summary>
    /// <para>System name or user defined subaccount alias</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("username")]
    public string Username {
      get {
        return this._Username;
      }
      set {
        this._Username = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Balance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Cashflow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Change;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Equity;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private object _Info = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InterestPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Position;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PriceCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ProfitAsCashflow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Side = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalInterestPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _UserId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _UserRole = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _UserSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Username = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTrade {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>User&apos;s fee in units of the specified <c>fee_currency</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_currency")]
    public string FeeCurrency {
      get {
        return this._FeeCurrency;
      }
      set {
        this._FeeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (presented only when previously set for order by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Describes what was role of users order: <c>&quot;M&quot;</c> when it was maker order, <c>&quot;T&quot;</c> when it was taker order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidity")]
    public string Liquidity {
      get {
        return this._Liquidity;
      }
      set {
        this._Liquidity = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Always <c>null</c>, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("matching_id")]
    public string MatchingId {
      get {
        return this._MatchingId;
      }
      set {
        this._MatchingId = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the user order (maker or taker), i.e. subscriber&apos;s order id that took part in the trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit</c>, <c>&quot;market&quot;</c>, or <c>&quot;liquidation&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is post-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public string PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is reduce-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public string ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("self_trade")]
    public bool SelfTrade {
      get {
        return this._SelfTrade;
      }
      set {
        this._SelfTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c> or <c>&quot;archive&quot;</c> (if order was archived)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (Options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _FeeCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Liquidity = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MatchingId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PostOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ReduceOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SelfTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicTrade {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TransferEntry {
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer direction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Id of transfer</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("other_side")]
    public string OtherSide {
      get {
        return this._OtherSide;
      }
      set {
        this._OtherSide = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer state, allowed values : <c>prepared</c>, <c>confirmed</c>, <c>cancelled</c>, <c>waiting_for_admin</c> otherwise rejection reason</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Type of transfer: <c>user</c> - sent to user, <c>subaccount</c> - sent to subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OtherSide = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TriggerOrder {
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (presented only when previously set for order by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;triggered&quot;</c>, <c>&quot;cancelled&quot;</c>, or <c>&quot;rejected&quot;</c> with rejection reason (e.g. <c>&quot;rejected:reduce_direction&quot;</c>).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Requested order type: <c>&quot;limit</c> or <c>&quot;market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Type of last request performed on the trigger order by user or system. <c>&quot;cancel&quot;</c> - when order was cancelled, <c>&quot;trigger:order&quot;</c> - when trigger order spawned market or limit order after being triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("request")]
    public string Request {
      get {
        return this._Request;
      }
      set {
        this._Request = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the user order used for the trigger-order reference before triggering</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public string TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Request = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TriggerOrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class MovePositionResponseTrade {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Trade source uid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("source_uid")]
    public int SourceUid {
      get {
        return this._SourceUid;
      }
      set {
        this._SourceUid = value;
      }
    }
    
    /// <summary>
    /// <para>Trade target uid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("target_uid")]
    public int TargetUid {
      get {
        return this._TargetUid;
      }
      set {
        this._TargetUid = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _SourceUid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TargetUid;
  }
  
  /// <summary>
  /// <para>Contains portfolio information about a subaccounts currency symbol</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class SubAccountPortfolioEntry {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_funds")]
    public decimal AvailableFunds {
      get {
        return this._AvailableFunds;
      }
      set {
        this._AvailableFunds = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_withdrawal_funds")]
    public decimal AvailableWithdrawalFunds {
      get {
        return this._AvailableWithdrawalFunds;
      }
      set {
        this._AvailableWithdrawalFunds = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("balance")]
    public decimal Balance {
      get {
        return this._Balance;
      }
      set {
        this._Balance = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("equity")]
    public decimal Equity {
      get {
        return this._Equity;
      }
      set {
        this._Equity = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("margin_balance")]
    public decimal MarginBalance {
      get {
        return this._MarginBalance;
      }
      set {
        this._MarginBalance = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableWithdrawalFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Balance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Equity;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarginBalance;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserPosition {
    
    /// <summary>
    /// <para>Average price of trades that built this position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, average price in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price_usd")]
    public System.Decimal? AveragePriceUsd {
      get {
        return this._AveragePriceUsd;
      }
      set {
        this._AveragePriceUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Delta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta")]
    public decimal Delta {
      get {
        return this._Delta;
      }
      set {
        this._Delta = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, <c>sell</c> or <c>zero</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Floating profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss")]
    public decimal FloatingProfitLoss {
      get {
        return this._FloatingProfitLoss;
      }
      set {
        this._FloatingProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, floating profit or loss in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss_usd")]
    public System.Decimal? FloatingProfitLossUsd {
      get {
        return this._FloatingProfitLossUsd;
      }
      set {
        this._FloatingProfitLossUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Gamma parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
    public System.Decimal? Gamma {
      get {
        return this._Gamma;
      }
      set {
        this._Gamma = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Current available leverage for future position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("leverage")]
    public int Leverage {
      get {
        return this._Leverage;
      }
      set {
        this._Leverage = value;
      }
    }
    
    /// <summary>
    /// <para>Maintenance margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Current mark price for position&apos;s instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Open orders margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_orders_margin")]
    public decimal OpenOrdersMargin {
      get {
        return this._OpenOrdersMargin;
      }
      set {
        this._OpenOrdersMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_funding")]
    public System.Decimal? RealizedFunding {
      get {
        return this._RealizedFunding;
      }
      set {
        this._RealizedFunding = value;
      }
    }
    
    /// <summary>
    /// <para>Realized profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_profit_loss")]
    public decimal RealizedProfitLoss {
      get {
        return this._RealizedProfitLoss;
      }
      set {
        this._RealizedProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Last settlement price for position&apos;s instrument 0 if instrument wasn&apos;t settled yet</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public decimal SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size")]
    public decimal Size {
      get {
        return this._Size;
      }
      set {
        this._Size = value;
      }
    }
    
    /// <summary>
    /// <para>Only for futures, position size in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size_currency")]
    public System.Decimal? SizeCurrency {
      get {
        return this._SizeCurrency;
      }
      set {
        this._SizeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Theta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("theta")]
    public System.Decimal? Theta {
      get {
        return this._Theta;
      }
      set {
        this._Theta = value;
      }
    }
    
    /// <summary>
    /// <para>Profit or loss from position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_profit_loss")]
    public decimal TotalProfitLoss {
      get {
        return this._TotalProfitLoss;
      }
      set {
        this._TotalProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Vega parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("vega")]
    public System.Decimal? Vega {
      get {
        return this._Vega;
      }
      set {
        this._Vega = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AveragePriceUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Delta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FloatingProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _FloatingProfitLossUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Gamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Leverage;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenOrdersMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _RealizedFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _RealizedProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Size;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SizeCurrency;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Theta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Vega;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class AffiliateReceivedPayouts {
    
    /// <summary>
    /// <para>Total payout received in BTC</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("btc")]
    public decimal Btc {
      get {
        return this._Btc;
      }
      set {
        this._Btc = value;
      }
    }
    
    /// <summary>
    /// <para>Total payout received in ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("eth")]
    public decimal Eth {
      get {
        return this._Eth;
      }
      set {
        this._Eth = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Btc;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Eth;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class SubAccountPortfolio {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("btc")]
    public SubAccountPortfolioEntry Btc {
      get {
        return this._Btc;
      }
      set {
        this._Btc = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("eth")]
    public SubAccountPortfolioEntry Eth {
      get {
        return this._Eth;
      }
      set {
        this._Eth = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SubAccountPortfolioEntry _Btc = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SubAccountPortfolioEntry _Eth = null!;
  }
  
  /// <summary>
  /// <para>Field not included if limits for futures are not set.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class MatchingEngineLimit {
    
    /// <summary>
    /// <para>Maximal number of (type related) matching engine requests allowed for user in burst mode</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("burst")]
    public int Burst {
      get {
        return this._Burst;
      }
      set {
        this._Burst = value;
      }
    }
    
    /// <summary>
    /// <para>Number of (type related) matching engine requests per second allowed for user</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("rate")]
    public int Rate {
      get {
        return this._Rate;
      }
      set {
        this._Rate = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Burst;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Rate;
  }
  
  /// <summary>
  /// <para>User fees in case of any discounts (available when parameter <c>extended</c> = <c>true</c> and user has any discounts)</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserFees {
    
    /// <summary>
    /// <para>The currency the fee applies to</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Fee type - <c>relative</c> if fee is calculated as a fraction of base instrument fee, <c>fixed</c> if fee is calculated solely using user fee</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_type")]
    public string FeeType {
      get {
        return this._FeeType;
      }
      set {
        this._FeeType = value;
      }
    }
    
    /// <summary>
    /// <para>Type of the instruments the fee applies to - <c>future</c> for future instruments (excluding perpetual), <c>perpetual</c> for future perpetual instruments, <c>option</c> for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_type")]
    public string InstrumentType {
      get {
        return this._InstrumentType;
      }
      set {
        this._InstrumentType = value;
      }
    }
    
    /// <summary>
    /// <para>User fee as a maker</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maker_fee")]
    public decimal MakerFee {
      get {
        return this._MakerFee;
      }
      set {
        this._MakerFee = value;
      }
    }
    
    /// <summary>
    /// <para>User fee as a taker</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("taker_fee")]
    public decimal TakerFee {
      get {
        return this._TakerFee;
      }
      set {
        this._TakerFee = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _FeeType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MakerFee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TakerFee;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class IndexDeliveryPrice {
    
    /// <summary>
    /// <para>The event date with year, month and day</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("date")]
    public string Date {
      get {
        return this._Date;
      }
      set {
        this._Date = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Date = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
  }
  
  /// <summary>
  /// <para>Only for options</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class OptionGreek {
    
    /// <summary>
    /// <para>(Only for option) The delta value for the option</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta")]
    public System.Decimal? Delta {
      get {
        return this._Delta;
      }
      set {
        this._Delta = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) The gamma value for the option</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
    public System.Decimal? Gamma {
      get {
        return this._Gamma;
      }
      set {
        this._Gamma = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) The rho value for the option</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("rho")]
    public System.Decimal? Rho {
      get {
        return this._Rho;
      }
      set {
        this._Rho = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) The theta value for the option</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("theta")]
    public System.Decimal? Theta {
      get {
        return this._Theta;
      }
      set {
        this._Theta = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) The vega value for the option</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("vega")]
    public System.Decimal? Vega {
      get {
        return this._Vega;
      }
      set {
        this._Vega = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Delta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Gamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Rho;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Theta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Vega;
  }
  
  /// <summary>
  /// <para>Contains information about public settlement, delivery or bankruptcy</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class SettlementEntry {
    
    /// <summary>
    /// <para>funded amount (bankruptcy only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funded")]
    public System.Decimal? Funded {
      get {
        return this._Funded;
      }
      set {
        this._Funded = value;
      }
    }
    
    /// <summary>
    /// <para>funding (in base currency ; settlement for perpetual product only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding")]
    public System.Decimal? Funding {
      get {
        return this._Funding;
      }
      set {
        this._Funding = value;
      }
    }
    
    /// <summary>
    /// <para>underlying index price at time of event (in quote currency; settlement and delivery only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public System.Decimal? IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>instrument name (settlement and delivery only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public System.String? InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>mark price for at the settlement time (in quote currency; settlement and delivery only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public System.Decimal? MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>position size (in quote currency; settlement and delivery only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("position")]
    public System.Decimal? Position {
      get {
        return this._Position;
      }
      set {
        this._Position = value;
      }
    }
    
    /// <summary>
    /// <para>profit and loss (in base currency; settlement and delivery only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public System.Decimal? ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>value of session bankruptcy (in base currency; bankruptcy only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_bankruptcy")]
    public System.Decimal? SessionBankruptcy {
      get {
        return this._SessionBankruptcy;
      }
      set {
        this._SessionBankruptcy = value;
      }
    }
    
    /// <summary>
    /// <para>total value of session profit and losses (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_profit_loss")]
    public decimal SessionProfitLoss {
      get {
        return this._SessionProfitLoss;
      }
      set {
        this._SessionProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>total amount of paid taxes/fees (in base currency; bankruptcy only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_tax")]
    public System.Decimal? SessionTax {
      get {
        return this._SessionTax;
      }
      set {
        this._SessionTax = value;
      }
    }
    
    /// <summary>
    /// <para>rate of paid taxes/fees (in base currency; bankruptcy only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_tax_rate")]
    public System.Decimal? SessionTaxRate {
      get {
        return this._SessionTaxRate;
      }
      set {
        this._SessionTaxRate = value;
      }
    }
    
    /// <summary>
    /// <para>the amount of the socialized losses (in base currency; bankruptcy only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("socialized")]
    public System.Decimal? Socialized {
      get {
        return this._Socialized;
      }
      set {
        this._Socialized = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The type of settlement. <c>settlement</c>, <c>delivery</c> or <c>bankruptcy</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funded;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _InstrumentName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Position;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SessionBankruptcy;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SessionTax;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SessionTaxRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Socialized;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserMatchingEngineLimits {
    
    /// <summary>
    /// <para>Field not included if limits for futures are not set.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures")]
    public System.Object? Futures {
      get {
        return this._Futures;
      }
      set {
        this._Futures = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("matching_engine")]
    public object MatchingEngine {
      get {
        return this._MatchingEngine;
      }
      set {
        this._MatchingEngine = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("non_matching_engine")]
    public object NonMatchingEngine {
      get {
        return this._NonMatchingEngine;
      }
      set {
        this._NonMatchingEngine = value;
      }
    }
    
    /// <summary>
    /// <para>Field not included if limits for options are not set.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options")]
    public System.Object? Options {
      get {
        return this._Options;
      }
      set {
        this._Options = value;
      }
    }
    
    /// <summary>
    /// <para>Field not included if limits for perpetuals are not set.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("perpetuals")]
    public System.Object? Perpetuals {
      get {
        return this._Perpetuals;
      }
      set {
        this._Perpetuals = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Object? _Futures;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private object _MatchingEngine = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private object _NonMatchingEngine = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Object? _Options;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Object? _Perpetuals;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class OrderBookStats {
    
    /// <summary>
    /// <para>Highest price during 24h</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high")]
    public decimal High {
      get {
        return this._High;
      }
      set {
        this._High = value;
      }
    }
    
    /// <summary>
    /// <para>Lowest price during 24h</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low")]
    public decimal Low {
      get {
        return this._Low;
      }
      set {
        this._Low = value;
      }
    }
    
    /// <summary>
    /// <para>24-hour price change expressed as a percentage, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_change")]
    public decimal PriceChange {
      get {
        return this._PriceChange;
      }
      set {
        this._PriceChange = value;
      }
    }
    
    /// <summary>
    /// <para>Volume during last 24h in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume")]
    public decimal Volume {
      get {
        return this._Volume;
      }
      set {
        this._Volume = value;
      }
    }
    
    /// <summary>
    /// <para>Volume in usd (futures only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume_usd")]
    public System.Decimal? VolumeUsd {
      get {
        return this._VolumeUsd;
      }
      set {
        this._VolumeUsd = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _High;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Low;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PriceChange;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Volume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _VolumeUsd;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class FundingChartDataEntry {
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Historical interest 8h value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_8h")]
    public decimal Interest8H {
      get {
        return this._Interest8H;
      }
      set {
        this._Interest8H = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Interest8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// <para>List of trades for position move</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class MovePositionRequestTrade {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Price for trade - if not provided mark price of the instrument is used</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. Amount can&apos;t exceed position size.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
  }
  
  /// <summary>
  /// <para>List of trades for block trade</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BlockTradeTradesEntry {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Price for trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of trade from the maker perspective</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public TradeDirection Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TradeDirection _Direction = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrder {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class WithdrawalPriority {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("value")]
    public decimal Value {
      get {
        return this._Value;
      }
      set {
        this._Value = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Value;
  }
}
