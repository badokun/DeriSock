// --------------------------------------------------------------------------
// <auto-generated>
//      This code was generated by a tool.
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------
#pragma warning disable CS1591
#nullable enable
namespace DeriSock.Model {
  using System;
  using DeriSock.Converter;
  
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicAuthRequest {
    
    /// <summary>
    /// <para>Method of authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("grant_type")]
    public GrantType? GrantType {
      get {
        return this._GrantType;
      }
      set {
        this._GrantType = value;
      }
    }
    
    /// <summary>
    /// <para>Required for grant type <c>client_credentials</c> and <c>client_signature</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public System.String? ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Required for grant type <c>client_credentials</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public System.String? ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Required for grant type <c>refresh_token</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public System.String? RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>Required for grant type <c>client_signature</c>, provides time when request has been generated (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Required for grant type <c>client_signature</c>; it&apos;s a cryptographic signature calculated over provided fields using user <b>secret key</b>. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with <c>SHA256</c> hash algorithm</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("signature")]
    public System.String? Signature {
      get {
        return this._Signature;
      }
      set {
        this._Signature = value;
      }
    }
    
    /// <summary>
    /// <para>Optional for grant type <c>client_signature</c>; delivers user generated initialization vector for the server token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("nonce")]
    public System.String? Nonce {
      get {
        return this._Nonce;
      }
      set {
        this._Nonce = value;
      }
    }
    
    /// <summary>
    /// <para>Optional for grant type <c>client_signature</c>; contains any user specific value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public System.String? Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    /// <summary>
    /// <para>Will be passed back in the response</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public System.String? State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Describes type of the access for assigned token, possible values: <c>connection</c>, <c>session:name</c>, <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>expires:NUMBER</c>, <c>ip:ADDR</c>.</para>
    /// <para>Details are elucidated in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public System.String? Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private GrantType? _GrantType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _ClientId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _ClientSecret;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _RefreshToken;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Signature;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Nonce;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Data;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _State;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Scope;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicExchangeTokenRequest {
    
    /// <summary>
    /// <para>Refresh token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public string RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>New subject id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("subject_id")]
    public int SubjectId {
      get {
        return this._SubjectId;
      }
      set {
        this._SubjectId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _RefreshToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _SubjectId;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicForkTokenRequest {
    
    /// <summary>
    /// <para>Refresh token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public string RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>New session name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_name")]
    public string SessionName {
      get {
        return this._SessionName;
      }
      set {
        this._SessionName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _RefreshToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SessionName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateLogoutRequest {
    
    /// <summary>
    /// <para>If value is <c>true</c> all tokens created in current session are invalidated, default: <c>true</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("invalidate_token")]
    public System.Boolean? InvalidateToken {
      get {
        return this._InvalidateToken;
      }
      set {
        this._InvalidateToken = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _InvalidateToken;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicSetHeartbeatRequest {
    
    /// <summary>
    /// <para>The heartbeat interval in seconds, but not less than 10</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public decimal Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Interval;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEnableCancelOnDisconnectRequest {
    
    /// <summary>
    /// <para>Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - <c>connection</c>)</para>
    /// <para><b>NOTICE:</b> Scope <c>connection</c> can be used only when working via Websocket.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public ConnectionScope? Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ConnectionScope? _Scope;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateDisableCancelOnDisconnectRequest {
    
    /// <summary>
    /// <para>Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - <c>connection</c>)</para>
    /// <para><b>NOTICE:</b> Scope <c>connection</c> can be used only when working via Websocket.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public ConnectionScope? Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ConnectionScope? _Scope;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetCancelOnDisconnectRequest {
    
    /// <summary>
    /// <para>Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - <c>connection</c>)</para>
    /// <para><b>NOTICE:</b> Scope <c>connection</c> can be used only when working via Websocket.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public ConnectionScope? Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ConnectionScope? _Scope;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicHelloRequest {
    
    /// <summary>
    /// <para>Client software name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_name")]
    public string ClientName {
      get {
        return this._ClientName;
      }
      set {
        this._ClientName = value;
      }
    }
    
    /// <summary>
    /// <para>Client software version</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_version")]
    public string ClientVersion {
      get {
        return this._ClientVersion;
      }
      set {
        this._ClientVersion = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientVersion = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicTestRequest {
    
    /// <summary>
    /// <para>The value &quot;exception&quot; will trigger an error response. This may be useful for testing wrapper libraries.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expected_result")]
    public TestExpectedResult? ExpectedResult {
      get {
        return this._ExpectedResult;
      }
      set {
        this._ExpectedResult = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TestExpectedResult? _ExpectedResult;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicSubscribeRequest {
    
    /// <summary>
    /// <para>A list of channels to subscribe to.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("channels")]
    public string[] Channels {
      get {
        return this._Channels;
      }
      set {
        this._Channels = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _Channels = System.Array.Empty<System.String>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicUnsubscribeRequest {
    
    /// <summary>
    /// <para>A list of channels to unsubscribe from.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("channels")]
    public string[] Channels {
      get {
        return this._Channels;
      }
      set {
        this._Channels = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _Channels = System.Array.Empty<System.String>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSubscribeRequest {
    
    /// <summary>
    /// <para>A list of channels to subscribe to.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("channels")]
    public string[] Channels {
      get {
        return this._Channels;
      }
      set {
        this._Channels = value;
      }
    }
    
    /// <summary>
    /// <para>Optional label which will be added to notifications of private channels (max 16 characters).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public System.String? Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _Channels = System.Array.Empty<System.String>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Label;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateUnsubscribeRequest {
    
    /// <summary>
    /// <para>A list of channels to unsubscribe from.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("channels")]
    public string[] Channels {
      get {
        return this._Channels;
      }
      set {
        this._Channels = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _Channels = System.Array.Empty<System.String>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetAnnouncementsRequest {
    
    /// <summary>
    /// <para>The most recent timestamp to return the results for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum count of returned announcements</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetPortfolioMarginsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Object with positions in following form: <c>{InstrumentName1: Position1, InstrumentName2: Position2...}</c>, for example <c>{&quot;BTC-PERPETUAL&quot;: -1000.0}</c> (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("simulated_positions")]
    public SimulatedPositions? SimulatedPositions {
      get {
        return this._SimulatedPositions;
      }
      set {
        this._SimulatedPositions = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SimulatedPositions? _SimulatedPositions;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateChangeApiKeyNameRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateChangeScopeInApiKeyRequest {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateChangeSubaccountNameRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sid")]
    public int Sid {
      get {
        return this._Sid;
      }
      set {
        this._Sid = value;
      }
    }
    
    /// <summary>
    /// <para>The new user name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Sid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCreateApiKeyRequest {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, new key is marked as default</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public System.Boolean? Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public System.String? Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Name;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateDisableApiKeyRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEnableApiKeyRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetAccessLogRequest {
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetAccountSummaryRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Include additional fields</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("extended")]
    public System.Boolean? Extended {
      get {
        return this._Extended;
      }
      set {
        this._Extended = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Extended;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetPortfolioMarginsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, adds simulated positions to current positions, otherwise uses only simulated positions. By default <c>true</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("add_positions")]
    public System.Boolean? AddPositions {
      get {
        return this._AddPositions;
      }
      set {
        this._AddPositions = value;
      }
    }
    
    /// <summary>
    /// <para>Object with positions in following form: <c>{InstrumentName1: Position1, InstrumentName2: Position2...}</c>, for example <c>{&quot;BTC-PERPETUAL&quot;: -1000.0}</c> (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("simulated_positions")]
    public SimulatedPositions? SimulatedPositions {
      get {
        return this._SimulatedPositions;
      }
      set {
        this._SimulatedPositions = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _AddPositions;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SimulatedPositions? _SimulatedPositions;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetPositionRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetPositionsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Kind filter on positions</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSubaccountsRequest {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("with_portfolio")]
    public System.Boolean? WithPortfolio {
      get {
        return this._WithPortfolio;
      }
      set {
        this._WithPortfolio = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _WithPortfolio;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSubaccountsDetailsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Optional parameter to ask for open orders list, default: <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("with_open_orders")]
    public System.Boolean? WithOpenOrders {
      get {
        return this._WithOpenOrders;
      }
      set {
        this._WithOpenOrders = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _WithOpenOrders;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTransactionLogRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The following keywords can be used to filter the results: <c>trade</c>, <c>maker</c>, <c>taker</c>, <c>open</c>, <c>close</c>, <c>liquidation</c>, <c>buy</c>, <c>sell</c>, <c>withdrawal</c>, <c>delivery</c>, <c>settlement</c>, <c>deposit</c>, <c>transfer</c>, <c>option</c>, <c>future</c>, <c>correction</c>, <c>block_trade</c>, <c>swap</c>. Plus withdrawal or transfer addresses</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("query")]
    public System.String? Query {
      get {
        return this._Query;
      }
      set {
        this._Query = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>100</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.Int32? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Query;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Continuation;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateRemoveApiKeyRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateRemoveSubaccountRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("subaccount_id")]
    public int SubaccountId {
      get {
        return this._SubaccountId;
      }
      set {
        this._SubaccountId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _SubaccountId;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateResetApiKeyRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetAnnouncementAsReadRequest {
    
    /// <summary>
    /// <para>the ID of the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("announcement_id")]
    public decimal AnnouncementId {
      get {
        return this._AnnouncementId;
      }
      set {
        this._AnnouncementId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AnnouncementId;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetApiKeyAsDefaultRequest {
    
    /// <summary>
    /// <para>Id of key</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetEmailForSubaccountRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sid")]
    public int Sid {
      get {
        return this._Sid;
      }
      set {
        this._Sid = value;
      }
    }
    
    /// <summary>
    /// <para>The email address for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("email")]
    public string Email {
      get {
        return this._Email;
      }
      set {
        this._Email = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Sid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Email = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetEmailLanguageRequest {
    
    /// <summary>
    /// <para>The abbreviated language name. Valid values include <c>&quot;en&quot;</c>, <c>&quot;ko&quot;</c>, <c>&quot;zh&quot;</c>,  <c>&quot;ja&quot;</c>, <c>&quot;ru&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("language")]
    public string Language {
      get {
        return this._Language;
      }
      set {
        this._Language = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Language = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetPasswordForSubaccountRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sid")]
    public int Sid {
      get {
        return this._Sid;
      }
      set {
        this._Sid = value;
      }
    }
    
    /// <summary>
    /// <para>The password for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("password")]
    public string Password {
      get {
        return this._Password;
      }
      set {
        this._Password = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Sid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Password = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateToggleNotificationsFromSubaccountRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sid")]
    public int Sid {
      get {
        return this._Sid;
      }
      set {
        this._Sid = value;
      }
    }
    
    /// <summary>
    /// <para>enable (<c>true</c>) or disable (<c>false</c>) notifications</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public bool State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Sid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _State;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateToggleSubaccountLoginRequest {
    
    /// <summary>
    /// <para>The user id for the subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sid")]
    public int Sid {
      get {
        return this._Sid;
      }
      set {
        this._Sid = value;
      }
    }
    
    /// <summary>
    /// <para>enable or disable login.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public LoginStatus State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Sid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private LoginStatus _State = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateExecuteBlockTradeRequest {
    
    /// <summary>
    /// <para>Timestamp, shared with other party (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Nonce, shared with other party</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("nonce")]
    public string Nonce {
      get {
        return this._Nonce;
      }
      set {
        this._Nonce = value;
      }
    }
    
    /// <summary>
    /// <para>Describes if user wants to be maker or taker of trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("role")]
    public TradeRole Role {
      get {
        return this._Role;
      }
      set {
        this._Role = value;
      }
    }
    
    /// <summary>
    /// <para>List of trades for block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public BlockTradeTradesEntry[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    /// <summary>
    /// <para>Signature of block trade generated by <c>private/verify_block_trade_method</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("counterparty_signature")]
    public string CounterpartySignature {
      get {
        return this._CounterpartySignature;
      }
      set {
        this._CounterpartySignature = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol? Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Nonce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TradeRole _Role = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private BlockTradeTradesEntry[] _Trades = System.Array.Empty<BlockTradeTradesEntry>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CounterpartySignature = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol? _Currency;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetBlockTradeRequest {
    
    /// <summary>
    /// <para>Block trade id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public string Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Id = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetLastBlockTradesByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The id of the newest block trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_id")]
    public System.String? StartId {
      get {
        return this._StartId;
      }
      set {
        this._StartId = value;
      }
    }
    
    /// <summary>
    /// <para>The id of the oldest block trade to be returned, <c>start_id</c> is required with <c>end_id</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_id")]
    public System.String? EndId {
      get {
        return this._EndId;
      }
      set {
        this._EndId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _StartId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _EndId;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateInvalidateBlockTradeSignatureRequest {
    
    /// <summary>
    /// <para>Signature of block trade that will be invalidated</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("signature")]
    public string Signature {
      get {
        return this._Signature;
      }
      set {
        this._Signature = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Signature = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateMovePositionsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol? Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Id of source subaccount. Can be found in <c>My Account &gt;&gt; Subaccounts</c> tab</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("source_uid")]
    public int SourceUid {
      get {
        return this._SourceUid;
      }
      set {
        this._SourceUid = value;
      }
    }
    
    /// <summary>
    /// <para>Id of target subaccount. Can be found in <c>My Account &gt;&gt; Subaccounts</c> tab</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("target_uid")]
    public int TargetUid {
      get {
        return this._TargetUid;
      }
      set {
        this._TargetUid = value;
      }
    }
    
    /// <summary>
    /// <para>List of trades for position move</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public MovePositionRequestTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol? _Currency;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _SourceUid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TargetUid;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private MovePositionRequestTrade[] _Trades = System.Array.Empty<MovePositionRequestTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateVerifyBlockTradeRequest {
    
    /// <summary>
    /// <para>Timestamp, shared with other party (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Nonce, shared with other party</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("nonce")]
    public string Nonce {
      get {
        return this._Nonce;
      }
      set {
        this._Nonce = value;
      }
    }
    
    /// <summary>
    /// <para>Describes if user wants to be maker or taker of trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("role")]
    public TradeRole Role {
      get {
        return this._Role;
      }
      set {
        this._Role = value;
      }
    }
    
    /// <summary>
    /// <para>List of trades for block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public BlockTradeTradesEntry[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol? Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Nonce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TradeRole _Role = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private BlockTradeTradesEntry[] _Trades = System.Array.Empty<BlockTradeTradesEntry>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol? _Currency;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateBuyRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The order type, default: <c>&quot;limit&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public BuySellOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>user defined label for the order (maximum 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public System.String? Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>The order price in base currency (Only for limit and stop_limit orders)</para>
    /// <para>When adding order with advanced=usd, the field price should be the option price value in USD.</para>
    /// <para>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Specifies how long the order remains in effect. Default <c>&quot;good_til_cancelled&quot;</c></para>
    /// <para>- <c>&quot;good_til_cancelled&quot;</c> - unfilled order remains in order book until cancelled</para>
    /// <para>- <c>&quot;good_til_day&quot;</c> - unfilled order remains in order book till the end of the trading session</para>
    /// <para>- <c>&quot;fill_or_kill&quot;</c> - execute a transaction immediately and completely or not at all</para>
    /// <para>- <c>&quot;immediate_or_cancel&quot;</c> - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public TimeInForce? TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other customers, <c>0</c> for invisible order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public System.Decimal? MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread.</para>
    /// <para>Only valid in combination with time_in_force=<c>&quot;good_til_cancelled&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public System.Boolean? PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.</para>
    /// <para>Only valid in combination with <c>&quot;post_only&quot;</c> set to true</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public System.Boolean? RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, the order is considered reduce-only which is intended to only reduce a current position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public System.Boolean? ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Defines the trigger type. Required for <c>&quot;Stop-Loss&quot;</c>, <c>&quot;Take-Profit&quot;</c> and <c>&quot;Trailing&quot;</c> trigger orders</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public TriggerType? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    /// <summary>
    /// <para>Advanced option order type. (Only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public AdvancedOptionOrderType? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Order MMP flag, only for order_type &apos;limit&apos;</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp")]
    public System.Boolean? Mmp {
      get {
        return this._Mmp;
      }
      set {
        this._Mmp = value;
      }
    }
    
    /// <summary>
    /// <para>Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases <c>timed_out</c> error will be responded. Remember that the given timestamp should be consistent with the server&apos;s time, use <a href="https://docs.deribit.com/#public-get_time">/public/time</a> method to obtain current server time.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("valid_until")]
    public System.Int32? ValidUntil {
      get {
        return this._ValidUntil;
      }
      set {
        this._ValidUntil = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private BuySellOrderType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Label;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TimeInForce? _TimeInForce;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TriggerType? _Trigger;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private AdvancedOptionOrderType? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Mmp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _ValidUntil;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSellRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The order type, default: <c>&quot;limit&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public BuySellOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>user defined label for the order (maximum 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public System.String? Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>The order price in base currency (Only for limit and stop_limit orders)</para>
    /// <para>When adding order with advanced=usd, the field price should be the option price value in USD.</para>
    /// <para>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Specifies how long the order remains in effect. Default <c>&quot;good_til_cancelled&quot;</c></para>
    /// <para>- <c>&quot;good_til_cancelled&quot;</c> - unfilled order remains in order book until cancelled</para>
    /// <para>- <c>&quot;good_til_day&quot;</c> - unfilled order remains in order book till the end of the trading session</para>
    /// <para>- <c>&quot;fill_or_kill&quot;</c> - execute a transaction immediately and completely or not at all</para>
    /// <para>- <c>&quot;immediate_or_cancel&quot;</c> - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public TimeInForce? TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other customers, <c>0</c> for invisible order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public System.Decimal? MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just above the spread.</para>
    /// <para>Only valid in combination with time_in_force=<c>&quot;good_til_cancelled&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public System.Boolean? PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.</para>
    /// <para>Only valid in combination with <c>&quot;post_only&quot;</c> set to true</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public System.Boolean? RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, the order is considered reduce-only which is intended to only reduce a current position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public System.Boolean? ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Defines the trigger type. Required for <c>&quot;Stop-Loss&quot;</c>, <c>&quot;Take-Profit&quot;</c> and <c>&quot;Trailing&quot;</c> trigger orders</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public TriggerType? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    /// <summary>
    /// <para>Advanced option order type. (Only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public AdvancedOptionOrderType? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Order MMP flag, only for order_type &apos;limit&apos;</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp")]
    public System.Boolean? Mmp {
      get {
        return this._Mmp;
      }
      set {
        this._Mmp = value;
      }
    }
    
    /// <summary>
    /// <para>Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases <c>timed_out</c> error will be responded. Remember that the given timestamp should be consistent with the server&apos;s time, use <a href="https://docs.deribit.com/#public-get_time">/public/time</a> method to obtain current server time.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("valid_until")]
    public System.Int32? ValidUntil {
      get {
        return this._ValidUntil;
      }
      set {
        this._ValidUntil = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private BuySellOrderType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Label;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TimeInForce? _TimeInForce;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TriggerType? _Trigger;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private AdvancedOptionOrderType? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Mmp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _ValidUntil;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEditRequest {
    
    /// <summary>
    /// <para>The order id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The order price in base currency.</para>
    /// <para>When editing an option order with advanced=usd, the field price should be the option price value in USD.</para>
    /// <para>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type).</para>
    /// <para>Only valid in combination with time_in_force=<c>&quot;good_til_cancelled&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public System.Boolean? PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, the order is considered reduce-only which is intended to only reduce a current position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public System.Boolean? ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.</para>
    /// <para>Only valid in combination with <c>&quot;post_only&quot;</c> set to true</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public System.Boolean? RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public AdvancedOptionOrderType? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Order MMP flag, only for order_type &apos;limit&apos;</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp")]
    public System.Boolean? Mmp {
      get {
        return this._Mmp;
      }
      set {
        this._Mmp = value;
      }
    }
    
    /// <summary>
    /// <para>Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases <c>timed_out</c> error will be responded. Remember that the given timestamp should be consistent with the server&apos;s time, use <a href="https://docs.deribit.com/#public-get_time">/public/time</a> method to obtain current server time.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("valid_until")]
    public System.Int32? ValidUntil {
      get {
        return this._ValidUntil;
      }
      set {
        this._ValidUntil = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private AdvancedOptionOrderType? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Mmp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _ValidUntil;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEditByLabelRequest {
    
    /// <summary>
    /// <para>user defined label for the order (maximum 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public System.String? Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The order price in base currency.</para>
    /// <para>When editing an option order with advanced=usd, the field price should be the option price value in USD.</para>
    /// <para>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type).</para>
    /// <para>Only valid in combination with time_in_force=<c>&quot;good_til_cancelled&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public System.Boolean? PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If <c>true</c>, the order is considered reduce-only which is intended to only reduce a current position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public System.Boolean? ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>If an order is considered post-only and this field is set to true then the order is put to order book unmodified or request is rejected.</para>
    /// <para>Only valid in combination with <c>&quot;post_only&quot;</c> set to true</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public System.Boolean? RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public AdvancedOptionOrderType? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Order MMP flag, only for order_type &apos;limit&apos;</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp")]
    public System.Boolean? Mmp {
      get {
        return this._Mmp;
      }
      set {
        this._Mmp = value;
      }
    }
    
    /// <summary>
    /// <para>Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases <c>timed_out</c> error will be responded. Remember that the given timestamp should be consistent with the server&apos;s time, use <a href="https://docs.deribit.com/#public-get_time">/public/time</a> method to obtain current server time.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("valid_until")]
    public System.Int32? ValidUntil {
      get {
        return this._ValidUntil;
      }
      set {
        this._ValidUntil = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Label;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private AdvancedOptionOrderType? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Mmp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _ValidUntil;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelRequest {
    
    /// <summary>
    /// <para>The order id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelAllRequest {
    
    /// <summary>
    /// <para>When detailed is set to <c>true</c> output format is changed. See <a href="https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods">description</a>. Default: <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("detailed")]
    public System.Boolean? Detailed {
      get {
        return this._Detailed;
      }
      set {
        this._Detailed = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Detailed;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelAllByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Order type - <c>limit</c>, <c>stop</c>, <c>take</c>, <c>trigger_all</c> or <c>all</c>, default - <c>all</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public CancelOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>When detailed is set to <c>true</c> output format is changed. See <a href="https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods">description</a>. Default: <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("detailed")]
    public System.Boolean? Detailed {
      get {
        return this._Detailed;
      }
      set {
        this._Detailed = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CancelOrderType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Detailed;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelAllByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Order type - <c>limit</c>, <c>stop</c>, <c>take</c>, <c>trigger_all</c> or <c>all</c>, default - <c>all</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public CancelOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>When detailed is set to <c>true</c> output format is changed. See <a href="https://docs.deribit.com/#detailed-response-for-private-cancel_all-and-private-cancel_by_label-methods">description</a>. Default: <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("detailed")]
    public System.Boolean? Detailed {
      get {
        return this._Detailed;
      }
      set {
        this._Detailed = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CancelOrderType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Detailed;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelByLabelRequest {
    
    /// <summary>
    /// <para>user defined label for the order (maximum 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol? Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol? _Currency;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateClosePositionRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The order type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public ClosePositionOrderType Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Optional price for limit order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public System.Decimal? Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ClosePositionOrderType _Type = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Price;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetMarginsRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetMmpConfigRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOpenOrdersByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Order type, default - <c>all</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public OpenOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OpenOrderType? _Type;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOpenOrdersByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Order type, default - <c>all</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public OpenOrderType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OpenOrderType? _Type;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderHistoryByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    /// <summary>
    /// <para>Include in result orders older than 2 days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Include in result fully unfilled closed orders, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_unfilled")]
    public System.Boolean? IncludeUnfilled {
      get {
        return this._IncludeUnfilled;
      }
      set {
        this._IncludeUnfilled = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeUnfilled;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderHistoryByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    /// <summary>
    /// <para>Include in result orders older than 2 days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Include in result fully unfilled closed orders, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_unfilled")]
    public System.Boolean? IncludeUnfilled {
      get {
        return this._IncludeUnfilled;
      }
      set {
        this._IncludeUnfilled = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeUnfilled;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderMarginByIdsRequest {
    
    /// <summary>
    /// <para>Ids of orders</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ids")]
    public string[] Ids {
      get {
        return this._Ids;
      }
      set {
        this._Ids = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _Ids = System.Array.Empty<System.String>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderStateRequest {
    
    /// <summary>
    /// <para>The order id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTriggerOrderHistoryRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public System.String? InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.String? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _InstrumentName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Continuation;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The ID number of the first trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_id")]
    public System.String? StartId {
      get {
        return this._StartId;
      }
      set {
        this._StartId = value;
      }
    }
    
    /// <summary>
    /// <para>The ID number of the last trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_id")]
    public System.String? EndId {
      get {
        return this._EndId;
      }
      set {
        this._EndId = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _StartId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _EndId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByCurrencyAndTimeRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the first trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_seq")]
    public System.Int32? StartSeq {
      get {
        return this._StartSeq;
      }
      set {
        this._StartSeq = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the last trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_seq")]
    public System.Int32? EndSeq {
      get {
        return this._EndSeq;
      }
      set {
        this._EndSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _StartSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _EndSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByInstrumentAndTimeRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByOrderRequest {
    
    /// <summary>
    /// <para>The order id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateResetMmpRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSendRfqRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Amount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public System.Decimal? Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Side - <c>buy</c> or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("side")]
    public TradeDirection? Side {
      get {
        return this._Side;
      }
      set {
        this._Side = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TradeDirection? _Side;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetMmpConfigRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>MMP Interval in seconds, if set to 0 MMP is disabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public int Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    /// <summary>
    /// <para>MMP frozen time in seconds, if set to 0 manual reset is required</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("frozen_time")]
    public int FrozenTime {
      get {
        return this._FrozenTime;
      }
      set {
        this._FrozenTime = value;
      }
    }
    
    /// <summary>
    /// <para>Quantity limit</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quantity_limit")]
    public System.Decimal? QuantityLimit {
      get {
        return this._QuantityLimit;
      }
      set {
        this._QuantityLimit = value;
      }
    }
    
    /// <summary>
    /// <para>Delta limit</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta_limit")]
    public System.Decimal? DeltaLimit {
      get {
        return this._DeltaLimit;
      }
      set {
        this._DeltaLimit = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Interval;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _FrozenTime;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _QuantityLimit;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeltaLimit;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSettlementHistoryByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public SettlementType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.String? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// <para>The latest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("search_start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? SearchStartTimestamp {
      get {
        return this._SearchStartTimestamp;
      }
      set {
        this._SearchStartTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _SearchStartTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSettlementHistoryByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public SettlementType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.String? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// <para>The latest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("search_start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? SearchStartTimestamp {
      get {
        return this._SearchStartTimestamp;
      }
      set {
        this._SearchStartTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _SearchStartTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetBookSummaryByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetBookSummaryByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetContractSizeRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetDeliveryPricesRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetFundingChartDataRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Specifies time period. <c>8h</c> - 8 hours, <c>24h</c> - 24 hours, <c>1m</c> - 1 month</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("length")]
    public FundingChartPeriod Length {
      get {
        return this._Length;
      }
      set {
        this._Length = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private FundingChartPeriod _Length = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetFundingRateHistoryRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetFundingRateValueRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetHistoricalVolatilityRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetIndexRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetIndexPriceRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetInstrumentsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Set to true to show recently expired instruments instead of active ones.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expired")]
    public System.Boolean? Expired {
      get {
        return this._Expired;
      }
      set {
        this._Expired = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Expired;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastSettlementsByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public SettlementType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.String? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// <para>The latest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("search_start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? SearchStartTimestamp {
      get {
        return this._SearchStartTimestamp;
      }
      set {
        this._SearchStartTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _SearchStartTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastSettlementsByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public SettlementType? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>20</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Continuation token for pagination</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public System.String? Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// <para>The latest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("search_start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime? SearchStartTimestamp {
      get {
        return this._SearchStartTimestamp;
      }
      set {
        this._SearchStartTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementType? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime? _SearchStartTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The ID number of the first trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_id")]
    public System.String? StartId {
      get {
        return this._StartId;
      }
      set {
        this._StartId = value;
      }
    }
    
    /// <summary>
    /// <para>The ID number of the last trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_id")]
    public System.String? EndId {
      get {
        return this._EndId;
      }
      set {
        this._EndId = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _StartId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _EndId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByCurrencyAndTimeRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByInstrumentRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the first trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_seq")]
    public System.Int32? StartSeq {
      get {
        return this._StartSeq;
      }
      set {
        this._StartSeq = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the last trade to be returned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_seq")]
    public System.Int32? EndSeq {
      get {
        return this._EndSeq;
      }
      set {
        this._EndSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _StartSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _EndSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByInstrumentAndTimeRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>Include trades older than a few recent days, default - <c>false</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("include_old")]
    public System.Boolean? IncludeOld {
      get {
        return this._IncludeOld;
      }
      set {
        this._IncludeOld = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sorting")]
    public UserTradeSortDirection? Sorting {
      get {
        return this._Sorting;
      }
      set {
        this._Sorting = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _IncludeOld;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTradeSortDirection? _Sorting;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetMarkPriceHistoryRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetOrderBookRequest {
    
    /// <summary>
    /// <para>The instrument name for which to retrieve the order book, see <a href="https://docs.deribit.com/#public-get_instruments"><c>public/get_instruments</c></a> to obtain instrument names.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The number of entries to return for bids and asks.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("depth")]
    public System.Decimal? Depth {
      get {
        return this._Depth;
      }
      set {
        this._Depth = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Depth;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetOrderBookByInstrumentIdRequest {
    
    /// <summary>
    /// <para>The instrument ID for which to retrieve the order book, see <a href="https://docs.deribit.com/#public-get_instruments"><c>public/get_instruments</c></a> to obtain instrument IDs.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_id")]
    public int InstrumentId {
      get {
        return this._InstrumentId;
      }
      set {
        this._InstrumentId = value;
      }
    }
    
    /// <summary>
    /// <para>The number of entries to return for bids and asks.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("depth")]
    public System.Decimal? Depth {
      get {
        return this._Depth;
      }
      set {
        this._Depth = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _InstrumentId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Depth;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetRfqsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, if not provided instruments of all kinds are considered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind? Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind? _Kind;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetTradeVolumesRequest {
    
    /// <summary>
    /// <para>Request for extended statistics. Including also 7 and 30 days volumes (default false)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("extended")]
    public System.Boolean? Extended {
      get {
        return this._Extended;
      }
      set {
        this._Extended = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Extended;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetTradingviewChartDataRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Chart bars resolution given in full minutes or keyword <c>1D</c> (only some specific resolutions are supported)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("resolution")]
    public ChartBarResolution Resolution {
      get {
        return this._Resolution;
      }
      set {
        this._Resolution = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ChartBarResolution _Resolution = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetVolatilityIndexDataRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The earliest timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("start_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime StartTimestamp {
      get {
        return this._StartTimestamp;
      }
      set {
        this._StartTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The most recent timestamp to return result for (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("end_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime EndTimestamp {
      get {
        return this._EndTimestamp;
      }
      set {
        this._EndTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Time resolution given in full seconds or keyword <c>1D</c> (only some specific resolutions are supported)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("resolution")]
    public VolatilityIndexResolution Resolution {
      get {
        return this._Resolution;
      }
      set {
        this._Resolution = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _StartTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _EndTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private VolatilityIndexResolution _Resolution = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicTickerRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelTransferByIdRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Id of transfer</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelWithdrawalRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The withdrawal id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public decimal Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Id;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCreateDepositAddressRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetCurrentDepositAddressRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetDepositsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTransfersRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetWithdrawalsRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Number of requested items, default - <c>10</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public System.Int32? Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// <para>The offset for pagination, default - <c>0</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("offset")]
    public System.Int32? Offset {
      get {
        return this._Offset;
      }
      set {
        this._Offset = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Offset;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSubmitTransferToSubaccountRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds to be transferred</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Id of destination subaccount. Can be found in <c>My Account &gt;&gt; Subaccounts</c> tab</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("destination")]
    public int Destination {
      get {
        return this._Destination;
      }
      set {
        this._Destination = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Destination;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSubmitTransferToUserRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds to be transferred</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Destination wallet&apos;s address taken from address book</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("destination")]
    public string Destination {
      get {
        return this._Destination;
      }
      set {
        this._Destination = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Destination = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateWithdrawRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Address in currency format, it must be in address book</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds to be withdrawn</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal priority, optional for BTC, default: <c>high</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("priority")]
    public WithdrawPriority? Priority {
      get {
        return this._Priority;
      }
      set {
        this._Priority = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private WithdrawPriority? _Priority;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BookInstrumentNameGroupDepthIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Group prices (by rounding). Use <c>none</c> for no grouping.</para>
    /// <para>For ETH cryptocurrency, real <c>group</c> is divided by 100.0, e.g. given value <c>5</c> means using <c>0.05</c></para>
    /// <para>Allowed values for BTC - <c>none</c>, <c>1</c>, <c>2</c>, <c>5</c>, <c>10</c></para>
    /// <para>Allowed values for ETH - <c>none</c>, <c>5</c>, <c>10</c>, <c>25</c>, <c>100</c>, <c>250</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("group")]
    public PriceGrouping Group {
      get {
        return this._Group;
      }
      set {
        this._Group = value;
      }
    }
    
    /// <summary>
    /// <para>Number of price levels to be included.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("depth")]
    public PriceLevelDepth Depth {
      get {
        return this._Depth;
      }
      set {
        this._Depth = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval1 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PriceGrouping _Group = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PriceLevelDepth _Depth = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval1 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BookInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class ChartTradesInstrumentNameResolutionRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Chart bars resolution given in full minutes or keyword <c>1D</c> (only some specific resolutions are supported)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("resolution")]
    public ChartBarResolution Resolution {
      get {
        return this._Resolution;
      }
      set {
        this._Resolution = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private ChartBarResolution _Resolution = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceIndexIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceRankingIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceStatisticsIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitVolatilityIndexIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class EstimatedExpirationPriceIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class IncrementalTickerInstrumentNameRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class InstrumentStateKindCurrencyRequest {
    
    /// <summary>
    /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKindOrAny Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKindOrAny _Kind = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class MarkpriceOptionsIndexNameRequest {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public IndexName IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexName _IndexName = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PerpetualInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class QuoteInstrumentNameRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class RfqCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TickerInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradesInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradesKindCurrencyIntervalRequest {
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKind Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKind _Kind = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserChangesInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserChangesKindCurrencyIntervalRequest {
    
    /// <summary>
    /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKindOrAny Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKindOrAny _Kind = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserMmpTriggerCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersInstrumentNameRawRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval1 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval1 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersKindCurrencyRawRequest {
    
    /// <summary>
    /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersKindCurrencyIntervalRequest {
    
    /// <summary>
    /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKindOrAny Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval1 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKindOrAny _Kind = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval1 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserPortfolioCurrencyRequest {
    
    /// <summary>
    /// <para>The currency symbol</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbol Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbol _Currency = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTradesInstrumentNameIntervalRequest {
    
    /// <summary>
    /// <para>Instrument name</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTradesKindCurrencyIntervalRequest {
    
    /// <summary>
    /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public InstrumentKindOrAny Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public CurrencySymbolOrAny Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Frequency of notifications. Events will be aggregated over this interval. The value <c>raw</c> means no aggregation will be applied</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public NotificationInterval2 Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private InstrumentKindOrAny _Kind = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private CurrencySymbolOrAny _Currency = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private NotificationInterval2 _Interval = null!;
  }
}
