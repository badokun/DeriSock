// --------------------------------------------------------------------------
// <auto-generated>
//      This code was generated by a tool.
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------
#pragma warning disable CS1591
#nullable enable
namespace DeriSock.Model {
  using System;
  using DeriSock.Converter;
  using Newtonsoft.Json.Linq;
  
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicAuthResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("access_token")]
    public string AccessToken {
      get {
        return this._AccessToken;
      }
      set {
        this._AccessToken = value;
      }
    }
    
    /// <summary>
    /// <para>Token lifetime in seconds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expires_in")]
    public int ExpiresIn {
      get {
        return this._ExpiresIn;
      }
      set {
        this._ExpiresIn = value;
      }
    }
    
    /// <summary>
    /// <para>Can be used to request a new token (with a new lifetime)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public string RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>Type of the access for assigned token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public string Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    /// <summary>
    /// <para>Copied from the input (if applicable)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Authorization type, allowed value - <c>bearer</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("token_type")]
    public string TokenType {
      get {
        return this._TokenType;
      }
      set {
        this._TokenType = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _AccessToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ExpiresIn;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _RefreshToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Scope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TokenType = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicExchangeTokenResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("access_token")]
    public string AccessToken {
      get {
        return this._AccessToken;
      }
      set {
        this._AccessToken = value;
      }
    }
    
    /// <summary>
    /// <para>Token lifetime in seconds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expires_in")]
    public int ExpiresIn {
      get {
        return this._ExpiresIn;
      }
      set {
        this._ExpiresIn = value;
      }
    }
    
    /// <summary>
    /// <para>Can be used to request a new token (with a new lifetime)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public string RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>Type of the access for assigned token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public string Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    /// <summary>
    /// <para>Authorization type, allowed value - <c>bearer</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("token_type")]
    public string TokenType {
      get {
        return this._TokenType;
      }
      set {
        this._TokenType = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _AccessToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ExpiresIn;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _RefreshToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Scope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TokenType = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicForkTokenResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("access_token")]
    public string AccessToken {
      get {
        return this._AccessToken;
      }
      set {
        this._AccessToken = value;
      }
    }
    
    /// <summary>
    /// <para>Token lifetime in seconds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expires_in")]
    public int ExpiresIn {
      get {
        return this._ExpiresIn;
      }
      set {
        this._ExpiresIn = value;
      }
    }
    
    /// <summary>
    /// <para>Can be used to request a new token (with a new lifetime)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("refresh_token")]
    public string RefreshToken {
      get {
        return this._RefreshToken;
      }
      set {
        this._RefreshToken = value;
      }
    }
    
    /// <summary>
    /// <para>Type of the access for assigned token</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public string Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    /// <summary>
    /// <para>Authorization type, allowed value - <c>bearer</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("token_type")]
    public string TokenType {
      get {
        return this._TokenType;
      }
      set {
        this._TokenType = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _AccessToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ExpiresIn;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _RefreshToken = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Scope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TokenType = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetCancelOnDisconnectResponse {
    
    /// <summary>
    /// <para>Current configuration status</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>Informs if Cancel on Disconnect was checked for the current connection or the account</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("scope")]
    public string Scope {
      get {
        return this._Scope;
      }
      set {
        this._Scope = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Scope = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicHelloResponse {
    
    /// <summary>
    /// <para>The API version</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("version")]
    public string Version {
      get {
        return this._Version;
      }
      set {
        this._Version = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Version = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicStatusResponse {
    
    /// <summary>
    /// <para><c>true</c> when platform is locked in all currencies, <c>partial</c> when some currencies are locked, <c>false</c> - when there are not currencies locked</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("locked")]
    public string Locked {
      get {
        return this._Locked;
      }
      set {
        this._Locked = value;
      }
    }
    
    /// <summary>
    /// <para>List of currencies in which platform is locked</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("locked_currencies")]
    public string[] LockedCurrencies {
      get {
        return this._LockedCurrencies;
      }
      set {
        this._LockedCurrencies = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Locked = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _LockedCurrencies = System.Array.Empty<System.String>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicTestResponse {
    
    /// <summary>
    /// <para>The API version</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("version")]
    public string Version {
      get {
        return this._Version;
      }
      set {
        this._Version = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Version = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetAnnouncementsResponse {
    
    /// <summary>
    /// <para>The HTML body of the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("body")]
    public string Body {
      get {
        return this._Body;
      }
      set {
        this._Body = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the user confirmation is required for this announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmation")]
    public bool Confirmation {
      get {
        return this._Confirmation;
      }
      set {
        this._Confirmation = value;
      }
    }
    
    /// <summary>
    /// <para>A unique identifier for the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public decimal Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the announcement is marked as important</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("important")]
    public bool Important {
      get {
        return this._Important;
      }
      set {
        this._Important = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of announcement publication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("publication_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime PublicationTimestamp {
      get {
        return this._PublicationTimestamp;
      }
      set {
        this._PublicationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The title of the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("title")]
    public string Title {
      get {
        return this._Title;
      }
      set {
        this._Title = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Body = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Confirmation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Important;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _PublicationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Title = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateChangeApiKeyNameResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateChangeScopeInApiKeyResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCreateApiKeyResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCreateSubaccountResponse {
    
    /// <summary>
    /// <para>User email</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("email")]
    public string Email {
      get {
        return this._Email;
      }
      set {
        this._Email = value;
      }
    }
    
    /// <summary>
    /// <para>Subaccount identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> when password for the subaccount has been configured</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_password")]
    public bool IsPassword {
      get {
        return this._IsPassword;
      }
      set {
        this._IsPassword = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether login to the subaccount is enabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("login_enabled")]
    public bool LoginEnabled {
      get {
        return this._LoginEnabled;
      }
      set {
        this._LoginEnabled = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("portfolio")]
    public SubAccountPortfolio Portfolio {
      get {
        return this._Portfolio;
      }
      set {
        this._Portfolio = value;
      }
    }
    
    /// <summary>
    /// <para>When <c>true</c> - receive all notification emails on the main email</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("receive_notifications")]
    public bool ReceiveNotifications {
      get {
        return this._ReceiveNotifications;
      }
      set {
        this._ReceiveNotifications = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the Security Keys authentication is enabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("security_keys_enabled")]
    public bool SecurityKeysEnabled {
      get {
        return this._SecurityKeysEnabled;
      }
      set {
        this._SecurityKeysEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>System generated user nickname</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("system_name")]
    public string SystemName {
      get {
        return this._SystemName;
      }
      set {
        this._SystemName = value;
      }
    }
    
    /// <summary>
    /// <para>Account type</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Account name (given by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("username")]
    public string Username {
      get {
        return this._Username;
      }
      set {
        this._Username = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Email = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsPassword;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _LoginEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SubAccountPortfolio _Portfolio = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReceiveNotifications;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SecurityKeysEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SystemName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Username = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateDisableApiKeyResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEnableApiKeyResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetAccessLogResponse {
    
    /// <summary>
    /// <para>City where the IP address is registered (estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("city")]
    public string City {
      get {
        return this._City;
      }
      set {
        this._City = value;
      }
    }
    
    /// <summary>
    /// <para>Country where the IP address is registered (estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("country")]
    public string Country {
      get {
        return this._Country;
      }
      set {
        this._Country = value;
      }
    }
    
    /// <summary>
    /// <para>Optional, additional information about action, type depends on <c>log</c> value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public DeriSock.Model.ObjectOrStringItem? Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    /// <summary>
    /// <para>Unique identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>IP address of source that generated action</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ip")]
    public string Ip {
      get {
        return this._Ip;
      }
      set {
        this._Ip = value;
      }
    }
    
    /// <summary>
    /// <para>Action description, values: <c>changed_email</c> - email was changed; <c>changed_password</c> - password was changed; <c>disabled_tfa</c> - TFA was disabled; <c>enabled_tfa</c> - TFA was enabled, <c>success</c> - successful login; <c>failure</c> - login failure; <c>enabled_subaccount_login</c> - login was enabled for subaccount (in <c>data</c> - subaccount uid); <c>disabled_subaccount_login</c> - login was disabled for subbaccount (in <c>data</c> - subbacount uid);<c>new_api_key</c> - API key was created (in <c>data</c> key client id); <c>removed_api_key</c> - API key was removed (in <c>data</c> key client id); <c>changed_scope</c> - scope of API key was changed (in <c>data</c> key client id); <c>changed_whitelist</c> - whitelist of API key was edited (in <c>data</c> key client id); <c>disabled_api_key</c> - API key was disabled (in <c>data</c> key client id); <c>enabled_api_key</c> - API key was enabled (in <c>data</c> key client id); <c>reset_api_key</c> - API key was reset (in <c>data</c> key client id)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("log")]
    public string Log {
      get {
        return this._Log;
      }
      set {
        this._Log = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _City = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Country = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.ObjectOrStringItem? _Data;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Ip = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Log = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetAccountSummaryResponse {
    
    /// <summary>
    /// <para>Options summary gamma</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_gamma")]
    public decimal OptionsGamma {
      get {
        return this._OptionsGamma;
      }
      set {
        this._OptionsGamma = value;
      }
    }
    
    /// <summary>
    /// <para>Projected maintenance margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_maintenance_margin")]
    public decimal ProjectedMaintenanceMargin {
      get {
        return this._ProjectedMaintenanceMargin;
      }
      set {
        this._ProjectedMaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>System generated user nickname (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("system_name")]
    public System.String? SystemName {
      get {
        return this._SystemName;
      }
      set {
        this._SystemName = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s margin balance</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("margin_balance")]
    public decimal MarginBalance {
      get {
        return this._MarginBalance;
      }
      set {
        this._MarginBalance = value;
      }
    }
    
    /// <summary>
    /// <para>Options value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_value")]
    public decimal OptionsValue {
      get {
        return this._OptionsValue;
      }
      set {
        this._OptionsValue = value;
      }
    }
    
    /// <summary>
    /// <para>Account name (given by user) (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("username")]
    public System.String? Username {
      get {
        return this._Username;
      }
      set {
        this._Username = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("limits")]
    public UserMatchingEngineLimits Limits {
      get {
        return this._Limits;
      }
      set {
        this._Limits = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s current equity</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("equity")]
    public decimal Equity {
      get {
        return this._Equity;
      }
      set {
        this._Equity = value;
      }
    }
    
    /// <summary>
    /// <para>Futures profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_pl")]
    public decimal FuturesPl {
      get {
        return this._FuturesPl;
      }
      set {
        this._FuturesPl = value;
      }
    }
    
    /// <summary>
    /// <para>Whether Security Key authentication is enabled (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("security_keys_enabled")]
    public System.Boolean? SecurityKeysEnabled {
      get {
        return this._SecurityKeysEnabled;
      }
      set {
        this._SecurityKeysEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>User fees in case of any discounts (available when parameter <c>extended</c> = <c>true</c> and user has any discounts)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fees")]
    public UserFees[]? Fees {
      get {
        return this._Fees;
      }
      set {
        this._Fees = value;
      }
    }
    
    /// <summary>
    /// <para>Options session unrealized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_session_upl")]
    public decimal OptionsSessionUpl {
      get {
        return this._OptionsSessionUpl;
      }
      set {
        this._OptionsSessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>Account id (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public System.Int32? Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary vega</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_vega")]
    public decimal OptionsVega {
      get {
        return this._OptionsVega;
      }
      set {
        this._OptionsVega = value;
      }
    }
    
    /// <summary>
    /// <para>Optional identifier of the referrer (of the affiliation program, and available when parameter <c>extended</c> = <c>true</c>), which link was used by this account at registration. It coincides with suffix of the affiliation link path after <c>/reg-</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("referrer_id")]
    public System.String? ReferrerId {
      get {
        return this._ReferrerId;
      }
      set {
        this._ReferrerId = value;
      }
    }
    
    /// <summary>
    /// <para>The selected currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Whether account is loginable using email and password (available when parameter <c>extended</c> = <c>true</c> and account is a subaccount)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("login_enabled")]
    public System.Boolean? LoginEnabled {
      get {
        return this._LoginEnabled;
      }
      set {
        this._LoginEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>Account type (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public System.String? Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>Futures session realized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_session_rpl")]
    public decimal FuturesSessionRpl {
      get {
        return this._FuturesSessionRpl;
      }
      set {
        this._FuturesSessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary theta</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_theta")]
    public decimal OptionsTheta {
      get {
        return this._OptionsTheta;
      }
      set {
        this._OptionsTheta = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> when portfolio margining is enabled for user</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("portfolio_margining_enabled")]
    public bool PortfolioMarginingEnabled {
      get {
        return this._PortfolioMarginingEnabled;
      }
      set {
        this._PortfolioMarginingEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>The sum of position deltas without positions that will expire during closest expiration</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_delta_total")]
    public decimal ProjectedDeltaTotal {
      get {
        return this._ProjectedDeltaTotal;
      }
      set {
        this._ProjectedDeltaTotal = value;
      }
    }
    
    /// <summary>
    /// <para>Session realized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_rpl")]
    public decimal SessionRpl {
      get {
        return this._SessionRpl;
      }
      set {
        this._SessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>The sum of position deltas</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta_total")]
    public decimal DeltaTotal {
      get {
        return this._DeltaTotal;
      }
      set {
        this._DeltaTotal = value;
      }
    }
    
    /// <summary>
    /// <para>Options profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_pl")]
    public decimal OptionsPl {
      get {
        return this._OptionsPl;
      }
      set {
        this._OptionsPl = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s available to withdrawal funds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_withdrawal_funds")]
    public decimal AvailableWithdrawalFunds {
      get {
        return this._AvailableWithdrawalFunds;
      }
      set {
        this._AvailableWithdrawalFunds = value;
      }
    }
    
    /// <summary>
    /// <para>The maintenance margin.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s fee balance (it can be used to pay for fees)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_balance")]
    public decimal FeeBalance {
      get {
        return this._FeeBalance;
      }
      set {
        this._FeeBalance = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> when the inter-user transfers are enabled for user (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interuser_transfers_enabled")]
    public System.Boolean? InteruserTransfersEnabled {
      get {
        return this._InteruserTransfersEnabled;
      }
      set {
        this._InteruserTransfersEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>Futures session unrealized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_session_upl")]
    public decimal FuturesSessionUpl {
      get {
        return this._FuturesSessionUpl;
      }
      set {
        this._FuturesSessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>Options session realized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_session_rpl")]
    public decimal OptionsSessionRpl {
      get {
        return this._OptionsSessionRpl;
      }
      set {
        this._OptionsSessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s available funds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_funds")]
    public decimal AvailableFunds {
      get {
        return this._AvailableFunds;
      }
      set {
        this._AvailableFunds = value;
      }
    }
    
    /// <summary>
    /// <para>User email (available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("email")]
    public System.String? Email {
      get {
        return this._Email;
      }
      set {
        this._Email = value;
      }
    }
    
    /// <summary>
    /// <para>Time at which the account was created (milliseconds since the Unix epoch; available when parameter <c>extended</c> = <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Session unrealized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_upl")]
    public decimal SessionUpl {
      get {
        return this._SessionUpl;
      }
      set {
        this._SessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_pl")]
    public decimal TotalPl {
      get {
        return this._TotalPl;
      }
      set {
        this._TotalPl = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary delta</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_delta")]
    public decimal OptionsDelta {
      get {
        return this._OptionsDelta;
      }
      set {
        this._OptionsDelta = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s balance</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("balance")]
    public decimal Balance {
      get {
        return this._Balance;
      }
      set {
        this._Balance = value;
      }
    }
    
    /// <summary>
    /// <para>Projected initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_initial_margin")]
    public decimal ProjectedInitialMargin {
      get {
        return this._ProjectedInitialMargin;
      }
      set {
        this._ProjectedInitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>The deposit address for the account (if available)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("deposit_address")]
    public string DepositAddress {
      get {
        return this._DepositAddress;
      }
      set {
        this._DepositAddress = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsGamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedMaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _SystemName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarginBalance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsValue;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Username;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserMatchingEngineLimits _Limits = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Equity;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _SecurityKeysEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserFees[]? _Fees;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsSessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsVega;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _ReferrerId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _LoginEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Type;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesSessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsTheta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PortfolioMarginingEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedDeltaTotal;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _DeltaTotal;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableWithdrawalFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FeeBalance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _InteruserTransfersEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesSessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsSessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Email;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsDelta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Balance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedInitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _DepositAddress = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetAffiliateProgramInfoResponse {
    
    /// <summary>
    /// <para>Status of affiliate program</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_enabled")]
    public bool IsEnabled {
      get {
        return this._IsEnabled;
      }
      set {
        this._IsEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>Affiliate link</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("link")]
    public string Link {
      get {
        return this._Link;
      }
      set {
        this._Link = value;
      }
    }
    
    /// <summary>
    /// <para>Number of affiliates</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("number_of_affiliates")]
    public decimal NumberOfAffiliates {
      get {
        return this._NumberOfAffiliates;
      }
      set {
        this._NumberOfAffiliates = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("received")]
    public AffiliateReceivedPayouts Received {
      get {
        return this._Received;
      }
      set {
        this._Received = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Link = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _NumberOfAffiliates;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private AffiliateReceivedPayouts _Received = null!;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetNewAnnouncementsResponse {
    
    /// <summary>
    /// <para>The HTML body of the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("body")]
    public string Body {
      get {
        return this._Body;
      }
      set {
        this._Body = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the user confirmation is required for this announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmation")]
    public bool Confirmation {
      get {
        return this._Confirmation;
      }
      set {
        this._Confirmation = value;
      }
    }
    
    /// <summary>
    /// <para>A unique identifier for the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public decimal Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the announcement is marked as important</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("important")]
    public bool Important {
      get {
        return this._Important;
      }
      set {
        this._Important = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of announcement publication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("publication_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime PublicationTimestamp {
      get {
        return this._PublicationTimestamp;
      }
      set {
        this._PublicationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The title of the announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("title")]
    public string Title {
      get {
        return this._Title;
      }
      set {
        this._Title = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Body = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Confirmation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Important;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _PublicationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Title = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetPositionResponse {
    
    /// <summary>
    /// <para>Average price of trades that built this position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, average price in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price_usd")]
    public System.Decimal? AveragePriceUsd {
      get {
        return this._AveragePriceUsd;
      }
      set {
        this._AveragePriceUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Delta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta")]
    public decimal Delta {
      get {
        return this._Delta;
      }
      set {
        this._Delta = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, <c>sell</c> or <c>zero</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated liquidation price, added only for futures, for non portfolio margining users</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_liquidation_price")]
    public System.Decimal? EstimatedLiquidationPrice {
      get {
        return this._EstimatedLiquidationPrice;
      }
      set {
        this._EstimatedLiquidationPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Floating profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss")]
    public decimal FloatingProfitLoss {
      get {
        return this._FloatingProfitLoss;
      }
      set {
        this._FloatingProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, floating profit or loss in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss_usd")]
    public System.Decimal? FloatingProfitLossUsd {
      get {
        return this._FloatingProfitLossUsd;
      }
      set {
        this._FloatingProfitLossUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Gamma parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
    public System.Decimal? Gamma {
      get {
        return this._Gamma;
      }
      set {
        this._Gamma = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Current available leverage for future position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("leverage")]
    public int Leverage {
      get {
        return this._Leverage;
      }
      set {
        this._Leverage = value;
      }
    }
    
    /// <summary>
    /// <para>Maintenance margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Current mark price for position&apos;s instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Open orders margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_orders_margin")]
    public decimal OpenOrdersMargin {
      get {
        return this._OpenOrdersMargin;
      }
      set {
        this._OpenOrdersMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_funding")]
    public System.Decimal? RealizedFunding {
      get {
        return this._RealizedFunding;
      }
      set {
        this._RealizedFunding = value;
      }
    }
    
    /// <summary>
    /// <para>Realized profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_profit_loss")]
    public decimal RealizedProfitLoss {
      get {
        return this._RealizedProfitLoss;
      }
      set {
        this._RealizedProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Last settlement price for position&apos;s instrument 0 if instrument wasn&apos;t settled yet</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public decimal SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size")]
    public decimal Size {
      get {
        return this._Size;
      }
      set {
        this._Size = value;
      }
    }
    
    /// <summary>
    /// <para>Only for futures, position size in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size_currency")]
    public System.Decimal? SizeCurrency {
      get {
        return this._SizeCurrency;
      }
      set {
        this._SizeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Theta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("theta")]
    public System.Decimal? Theta {
      get {
        return this._Theta;
      }
      set {
        this._Theta = value;
      }
    }
    
    /// <summary>
    /// <para>Profit or loss from position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_profit_loss")]
    public decimal TotalProfitLoss {
      get {
        return this._TotalProfitLoss;
      }
      set {
        this._TotalProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Vega parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("vega")]
    public System.Decimal? Vega {
      get {
        return this._Vega;
      }
      set {
        this._Vega = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AveragePriceUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Delta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _EstimatedLiquidationPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FloatingProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _FloatingProfitLossUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Gamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Leverage;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenOrdersMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _RealizedFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _RealizedProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Size;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SizeCurrency;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Theta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Vega;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetPositionsResponse {
    
    /// <summary>
    /// <para>Average price of trades that built this position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, average price in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price_usd")]
    public System.Decimal? AveragePriceUsd {
      get {
        return this._AveragePriceUsd;
      }
      set {
        this._AveragePriceUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Delta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta")]
    public decimal Delta {
      get {
        return this._Delta;
      }
      set {
        this._Delta = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, <c>sell</c> or <c>zero</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated liquidation price, added only for futures, for non portfolio margining users</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_liquidation_price")]
    public System.Decimal? EstimatedLiquidationPrice {
      get {
        return this._EstimatedLiquidationPrice;
      }
      set {
        this._EstimatedLiquidationPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Floating profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss")]
    public decimal FloatingProfitLoss {
      get {
        return this._FloatingProfitLoss;
      }
      set {
        this._FloatingProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, floating profit or loss in USD</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("floating_profit_loss_usd")]
    public System.Decimal? FloatingProfitLossUsd {
      get {
        return this._FloatingProfitLossUsd;
      }
      set {
        this._FloatingProfitLossUsd = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Gamma parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
    public System.Decimal? Gamma {
      get {
        return this._Gamma;
      }
      set {
        this._Gamma = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Current available leverage for future position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("leverage")]
    public int Leverage {
      get {
        return this._Leverage;
      }
      set {
        this._Leverage = value;
      }
    }
    
    /// <summary>
    /// <para>Maintenance margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Current mark price for position&apos;s instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Open orders margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_orders_margin")]
    public decimal OpenOrdersMargin {
      get {
        return this._OpenOrdersMargin;
      }
      set {
        this._OpenOrdersMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_funding")]
    public System.Decimal? RealizedFunding {
      get {
        return this._RealizedFunding;
      }
      set {
        this._RealizedFunding = value;
      }
    }
    
    /// <summary>
    /// <para>Realized profit or loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("realized_profit_loss")]
    public decimal RealizedProfitLoss {
      get {
        return this._RealizedProfitLoss;
      }
      set {
        this._RealizedProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Last settlement price for position&apos;s instrument 0 if instrument wasn&apos;t settled yet</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public decimal SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size")]
    public decimal Size {
      get {
        return this._Size;
      }
      set {
        this._Size = value;
      }
    }
    
    /// <summary>
    /// <para>Only for futures, position size in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("size_currency")]
    public System.Decimal? SizeCurrency {
      get {
        return this._SizeCurrency;
      }
      set {
        this._SizeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Theta parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("theta")]
    public System.Decimal? Theta {
      get {
        return this._Theta;
      }
      set {
        this._Theta = value;
      }
    }
    
    /// <summary>
    /// <para>Profit or loss from position</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_profit_loss")]
    public decimal TotalProfitLoss {
      get {
        return this._TotalProfitLoss;
      }
      set {
        this._TotalProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options, Vega parameter</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("vega")]
    public System.Decimal? Vega {
      get {
        return this._Vega;
      }
      set {
        this._Vega = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AveragePriceUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Delta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _EstimatedLiquidationPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FloatingProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _FloatingProfitLossUsd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Gamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Leverage;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenOrdersMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _RealizedFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _RealizedProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Size;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SizeCurrency;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Theta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Vega;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSubaccountsResponse {
    
    /// <summary>
    /// <para>User email</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("email")]
    public string Email {
      get {
        return this._Email;
      }
      set {
        this._Email = value;
      }
    }
    
    /// <summary>
    /// <para>Account/Subaccount identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> when password for the subaccount has been configured</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_password")]
    public bool IsPassword {
      get {
        return this._IsPassword;
      }
      set {
        this._IsPassword = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether login to the subaccount is enabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("login_enabled")]
    public bool LoginEnabled {
      get {
        return this._LoginEnabled;
      }
      set {
        this._LoginEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>New email address that has not yet been confirmed. This field is only included if <c>with_portfolio</c> == <c>true</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("not_confirmed_email")]
    public string NotConfirmedEmail {
      get {
        return this._NotConfirmedEmail;
      }
      set {
        this._NotConfirmedEmail = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("portfolio")]
    public SubAccountPortfolio Portfolio {
      get {
        return this._Portfolio;
      }
      set {
        this._Portfolio = value;
      }
    }
    
    /// <summary>
    /// <para>When <c>true</c> - receive all notification emails on the main email</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("receive_notifications")]
    public bool ReceiveNotifications {
      get {
        return this._ReceiveNotifications;
      }
      set {
        this._ReceiveNotifications = value;
      }
    }
    
    /// <summary>
    /// <para>Names of assignments with Security Keys assigned</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("security_keys_assignments")]
    public string[] SecurityKeysAssignments {
      get {
        return this._SecurityKeysAssignments;
      }
      set {
        this._SecurityKeysAssignments = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the Security Keys authentication is enabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("security_keys_enabled")]
    public bool SecurityKeysEnabled {
      get {
        return this._SecurityKeysEnabled;
      }
      set {
        this._SecurityKeysEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>System generated user nickname</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("system_name")]
    public string SystemName {
      get {
        return this._SystemName;
      }
      set {
        this._SystemName = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("username")]
    public string Username {
      get {
        return this._Username;
      }
      set {
        this._Username = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Email = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsPassword;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _LoginEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _NotConfirmedEmail = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SubAccountPortfolio _Portfolio = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReceiveNotifications;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string[] _SecurityKeysAssignments = System.Array.Empty<System.String>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SecurityKeysEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SystemName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Username = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSubaccountsDetailsResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_orders")]
    public UserOrder[]? OpenOrders {
      get {
        return this._OpenOrders;
      }
      set {
        this._OpenOrders = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("positions")]
    public UserPosition[] Positions {
      get {
        return this._Positions;
      }
      set {
        this._Positions = value;
      }
    }
    
    /// <summary>
    /// <para>Account/Subaccount identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("uid")]
    public int Uid {
      get {
        return this._Uid;
      }
      set {
        this._Uid = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder[]? _OpenOrders;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserPosition[] _Positions = System.Array.Empty<UserPosition>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Uid;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTransactionLogResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination. <c>NULL</c> when no continuation.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public int Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("logs")]
    public TransactionLogEntry[] Logs {
      get {
        return this._Logs;
      }
      set {
        this._Logs = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TransactionLogEntry[] _Logs = System.Array.Empty<TransactionLogEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateListApiKeysResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateResetApiKeyResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSetApiKeyAsDefaultResponse {
    
    /// <summary>
    /// <para>Client identifier used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_id")]
    public string ClientId {
      get {
        return this._ClientId;
      }
      set {
        this._ClientId = value;
      }
    }
    
    /// <summary>
    /// <para>Client secret used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("client_secret")]
    public string ClientSecret {
      get {
        return this._ClientSecret;
      }
      set {
        this._ClientSecret = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether this api key is default (field is deprecated and will be removed in the future)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("default")]
    public bool Default {
      get {
        return this._Default;
      }
      set {
        this._Default = value;
      }
    }
    
    /// <summary>
    /// <para>Informs whether api key is enabled and can be used for authentication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>key identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Describes maximal access for tokens generated with given key, possible values: <c>trade:[read, read_write, none]</c>, <c>wallet:[read, read_write, none]</c>, <c>account:[read, read_write, none]</c>, <c>block_trade:[read, read_write, none]</c>. If scope is not provided, it value is set as none.</para>
    /// <para>Please check details described in <a href="https://docs.deribit.com/#access-scope">Access scope</a></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_scope")]
    public string MaxScope {
      get {
        return this._MaxScope;
      }
      set {
        this._MaxScope = value;
      }
    }
    
    /// <summary>
    /// <para>Api key name that can be displayed in transaction log</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("name")]
    public string Name {
      get {
        return this._Name;
      }
      set {
        this._Name = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ClientSecret = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Default;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MaxScope = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Name = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateExecuteBlockTradeResponse {
    
    /// <summary>
    /// <para>The name of the application that executed the block trade on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public string Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Id = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetBlockTradeResponse {
    
    /// <summary>
    /// <para>The name of the application that executed the block trade on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public string Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Id = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetLastBlockTradesByCurrencyResponse {
    
    /// <summary>
    /// <para>The name of the application that executed the block trade on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public string Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Id = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateMovePositionsResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public MovePositionResponseTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private MovePositionResponseTrade[] _Trades = System.Array.Empty<MovePositionResponseTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateVerifyBlockTradeResponse {
    
    /// <summary>
    /// <para>Signature of block trade</para>
    /// <para>It is valid only for 5 minutes “around” given timestamp</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("signature")]
    public System.String? Signature {
      get {
        return this._Signature;
      }
      set {
        this._Signature = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Signature;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateBuyResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order")]
    public UserOrder Order {
      get {
        return this._Order;
      }
      set {
        this._Order = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder _Order = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSellResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order")]
    public UserOrder Order {
      get {
        return this._Order;
      }
      set {
        this._Order = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder _Order = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEditResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order")]
    public UserOrder Order {
      get {
        return this._Order;
      }
      set {
        this._Order = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder _Order = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateEditByLabelResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order")]
    public UserOrder Order {
      get {
        return this._Order;
      }
      set {
        this._Order = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder _Order = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateClosePositionResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order")]
    public UserOrder Order {
      get {
        return this._Order;
      }
      set {
        this._Order = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder _Order = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetMarginsResponse {
    
    /// <summary>
    /// <para>Margin when buying</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("buy")]
    public decimal Buy {
      get {
        return this._Buy;
      }
      set {
        this._Buy = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Margin when selling</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("sell")]
    public decimal Sell {
      get {
        return this._Sell;
      }
      set {
        this._Sell = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Buy;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Sell;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetMmpConfigResponse {
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Delta limit</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta_limit")]
    public decimal DeltaLimit {
      get {
        return this._DeltaLimit;
      }
      set {
        this._DeltaLimit = value;
      }
    }
    
    /// <summary>
    /// <para>MMP frozen time in seconds, if set to 0 manual reset is required</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("frozen_time")]
    public int FrozenTime {
      get {
        return this._FrozenTime;
      }
      set {
        this._FrozenTime = value;
      }
    }
    
    /// <summary>
    /// <para>MMP Interval in seconds, if set to 0 MMP is disabled</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interval")]
    public int Interval {
      get {
        return this._Interval;
      }
      set {
        this._Interval = value;
      }
    }
    
    /// <summary>
    /// <para>Quantity limit</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quantity_limit")]
    public decimal QuantityLimit {
      get {
        return this._QuantityLimit;
      }
      set {
        this._QuantityLimit = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _DeltaLimit;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _FrozenTime;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Interval;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _QuantityLimit;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOpenOrdersByCurrencyResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOpenOrdersByInstrumentResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderHistoryByCurrencyResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderHistoryByInstrumentResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderMarginByIdsResponse {
    
    /// <summary>
    /// <para>Initial margin of order, in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetOrderStateResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTriggerOrderHistoryResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public string Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("entries")]
    public TriggerOrder[] Entries {
      get {
        return this._Entries;
      }
      set {
        this._Entries = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Continuation = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TriggerOrder[] _Entries = System.Array.Empty<TriggerOrder>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByCurrencyResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByCurrencyAndTimeResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByInstrumentResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByInstrumentAndTimeResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetUserTradesByOrderResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>User&apos;s fee in units of the specified <c>fee_currency</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_currency")]
    public string FeeCurrency {
      get {
        return this._FeeCurrency;
      }
      set {
        this._FeeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (presented only when previously set for order by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Describes what was role of users order: <c>&quot;M&quot;</c> when it was maker order, <c>&quot;T&quot;</c> when it was taker order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidity")]
    public string Liquidity {
      get {
        return this._Liquidity;
      }
      set {
        this._Liquidity = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Always <c>null</c>, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("matching_id")]
    public string MatchingId {
      get {
        return this._MatchingId;
      }
      set {
        this._MatchingId = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the user order (maker or taker), i.e. subscriber&apos;s order id that took part in the trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit</c>, <c>&quot;market&quot;</c>, or <c>&quot;liquidation&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is post-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public string PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is reduce-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public string ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("self_trade")]
    public bool SelfTrade {
      get {
        return this._SelfTrade;
      }
      set {
        this._SelfTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c> or <c>&quot;archive&quot;</c> (if order was archived)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (Options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _FeeCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Liquidity = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MatchingId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PostOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ReduceOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SelfTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSettlementHistoryByInstrumentResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public string Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlements")]
    public SettlementEntry[] Settlements {
      get {
        return this._Settlements;
      }
      set {
        this._Settlements = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Continuation = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementEntry[] _Settlements = System.Array.Empty<SettlementEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetSettlementHistoryByCurrencyResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public string Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlements")]
    public SettlementEntry[] Settlements {
      get {
        return this._Settlements;
      }
      set {
        this._Settlements = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Continuation = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementEntry[] _Settlements = System.Array.Empty<SettlementEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetBookSummaryByCurrencyResponse {
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_price")]
    public decimal AskPrice {
      get {
        return this._AskPrice;
      }
      set {
        this._AskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("base_currency")]
    public string BaseCurrency {
      get {
        return this._BaseCurrency;
      }
      set {
        this._BaseCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_price")]
    public decimal BidPrice {
      get {
        return this._BidPrice;
      }
      set {
        this._BidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Contract Specification &gt; General Documentation &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Price of the 24h highest trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high")]
    public decimal High {
      get {
        return this._High;
      }
      set {
        this._High = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the latest trade, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last")]
    public decimal Last {
      get {
        return this._Last;
      }
      set {
        this._Last = value;
      }
    }
    
    /// <summary>
    /// <para>Price of the 24h lowest trade, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low")]
    public decimal Low {
      get {
        return this._Low;
      }
      set {
        this._Low = value;
      }
    }
    
    /// <summary>
    /// <para>The current instrument market price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The average of the best bid and ask, <c>null</c> if there aren&apos;t any asks or bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mid_price")]
    public decimal MidPrice {
      get {
        return this._MidPrice;
      }
      set {
        this._MidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Volume in quote currency (futures only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("notional_volume")]
    public System.Decimal? NotionalVolume {
      get {
        return this._NotionalVolume;
      }
      set {
        this._NotionalVolume = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>24-hour price change expressed as a percentage, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_change")]
    public decimal PriceChange {
      get {
        return this._PriceChange;
      }
      set {
        this._PriceChange = value;
      }
    }
    
    /// <summary>
    /// <para>Quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quote_currency")]
    public string QuoteCurrency {
      get {
        return this._QuoteCurrency;
      }
      set {
        this._QuoteCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>&apos;index_price&apos;</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.String? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total 24h traded volume (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume")]
    public decimal Volume {
      get {
        return this._Volume;
      }
      set {
        this._Volume = value;
      }
    }
    
    /// <summary>
    /// <para>[DEPRECATED] Volume in usd, use &apos;notional_volume&apos; instead, available only for instruments with USD as quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume_usd")]
    public System.Decimal? VolumeUsd {
      get {
        return this._VolumeUsd;
      }
      set {
        this._VolumeUsd = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BaseCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _High;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Last;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Low;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _NotionalVolume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PriceChange;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _QuoteCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Volume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _VolumeUsd;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetBookSummaryByInstrumentResponse {
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_price")]
    public decimal AskPrice {
      get {
        return this._AskPrice;
      }
      set {
        this._AskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("base_currency")]
    public string BaseCurrency {
      get {
        return this._BaseCurrency;
      }
      set {
        this._BaseCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_price")]
    public decimal BidPrice {
      get {
        return this._BidPrice;
      }
      set {
        this._BidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Contract Specification &gt; General Documentation &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Price of the 24h highest trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high")]
    public decimal High {
      get {
        return this._High;
      }
      set {
        this._High = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the latest trade, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last")]
    public decimal Last {
      get {
        return this._Last;
      }
      set {
        this._Last = value;
      }
    }
    
    /// <summary>
    /// <para>Price of the 24h lowest trade, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low")]
    public decimal Low {
      get {
        return this._Low;
      }
      set {
        this._Low = value;
      }
    }
    
    /// <summary>
    /// <para>The current instrument market price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The average of the best bid and ask, <c>null</c> if there aren&apos;t any asks or bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mid_price")]
    public decimal MidPrice {
      get {
        return this._MidPrice;
      }
      set {
        this._MidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Volume in quote currency (futures only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("notional_volume")]
    public System.Decimal? NotionalVolume {
      get {
        return this._NotionalVolume;
      }
      set {
        this._NotionalVolume = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>24-hour price change expressed as a percentage, <c>null</c> if there weren&apos;t any trades</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_change")]
    public decimal PriceChange {
      get {
        return this._PriceChange;
      }
      set {
        this._PriceChange = value;
      }
    }
    
    /// <summary>
    /// <para>Quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quote_currency")]
    public string QuoteCurrency {
      get {
        return this._QuoteCurrency;
      }
      set {
        this._QuoteCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>&apos;index_price&apos;</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.String? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total 24h traded volume (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume")]
    public decimal Volume {
      get {
        return this._Volume;
      }
      set {
        this._Volume = value;
      }
    }
    
    /// <summary>
    /// <para>[DEPRECATED] Volume in usd, use &apos;notional_volume&apos; instead, available only for instruments with USD as quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume_usd")]
    public System.Decimal? VolumeUsd {
      get {
        return this._VolumeUsd;
      }
      set {
        this._VolumeUsd = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BaseCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _High;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Last;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Low;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _NotionalVolume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PriceChange;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _QuoteCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Volume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _VolumeUsd;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetContractSizeResponse {
    
    /// <summary>
    /// <para>Contract size, for futures in USD, for options in base currency of the instrument (BTC, ETH, ...)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("contract_size")]
    public int ContractSize {
      get {
        return this._ContractSize;
      }
      set {
        this._ContractSize = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ContractSize;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetCurrenciesResponse {
    
    /// <summary>
    /// <para>The type of the currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("coin_type")]
    public string CoinType {
      get {
        return this._CoinType;
      }
      set {
        this._CoinType = value;
      }
    }
    
    /// <summary>
    /// <para>The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The full name for the currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency_long")]
    public string CurrencyLong {
      get {
        return this._CurrencyLong;
      }
      set {
        this._CurrencyLong = value;
      }
    }
    
    /// <summary>
    /// <para>fee precision</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_precision")]
    public int FeePrecision {
      get {
        return this._FeePrecision;
      }
      set {
        this._FeePrecision = value;
      }
    }
    
    /// <summary>
    /// <para>Minimum number of block chain confirmations before deposit is accepted.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_confirmations")]
    public int MinConfirmations {
      get {
        return this._MinConfirmations;
      }
      set {
        this._MinConfirmations = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum transaction fee paid for withdrawals</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_withdrawal_fee")]
    public decimal MinWithdrawalFee {
      get {
        return this._MinWithdrawalFee;
      }
      set {
        this._MinWithdrawalFee = value;
      }
    }
    
    /// <summary>
    /// <para>The total transaction fee paid for withdrawals</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("withdrawal_fee")]
    public decimal WithdrawalFee {
      get {
        return this._WithdrawalFee;
      }
      set {
        this._WithdrawalFee = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("withdrawal_priorities")]
    public WithdrawalPriority[] WithdrawalPriorities {
      get {
        return this._WithdrawalPriorities;
      }
      set {
        this._WithdrawalPriorities = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CoinType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CurrencyLong = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _FeePrecision;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _MinConfirmations;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinWithdrawalFee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _WithdrawalFee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private WithdrawalPriority[] _WithdrawalPriorities = System.Array.Empty<WithdrawalPriority>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetDeliveryPricesResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public IndexDeliveryPrice[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    /// <summary>
    /// <para>Available delivery prices</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("records_total")]
    public decimal RecordsTotal {
      get {
        return this._RecordsTotal;
      }
      set {
        this._RecordsTotal = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private IndexDeliveryPrice[] _Data = System.Array.Empty<IndexDeliveryPrice>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _RecordsTotal;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetFundingChartDataResponse {
    
    /// <summary>
    /// <para>Current interest</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_interest")]
    public decimal CurrentInterest {
      get {
        return this._CurrentInterest;
      }
      set {
        this._CurrentInterest = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public FundingChartDataEntry[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    /// <summary>
    /// <para>Current interest 8h</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_8h")]
    public decimal Interest8H {
      get {
        return this._Interest8H;
      }
      set {
        this._Interest8H = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _CurrentInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private FundingChartDataEntry[] _Data = System.Array.Empty<FundingChartDataEntry>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Interest8H;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetFundingRateHistoryResponse {
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>1hour interest rate</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_1h")]
    public double Interest1H {
      get {
        return this._Interest1H;
      }
      set {
        this._Interest1H = value;
      }
    }
    
    /// <summary>
    /// <para>8hour interest rate</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_8h")]
    public double Interest8H {
      get {
        return this._Interest8H;
      }
      set {
        this._Interest8H = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("prev_index_price")]
    public decimal PrevIndexPrice {
      get {
        return this._PrevIndexPrice;
      }
      set {
        this._PrevIndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private double _Interest1H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private double _Interest8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PrevIndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetIndexResponse {
    
    /// <summary>
    /// <para>The current index price for BTC-USD (only for selected currency == BTC)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("BTC")]
    public System.Decimal? BTC {
      get {
        return this._BTC;
      }
      set {
        this._BTC = value;
      }
    }
    
    /// <summary>
    /// <para>The current index price for ETH-USD (only for selected currency == ETH)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ETH")]
    public System.Decimal? ETH {
      get {
        return this._ETH;
      }
      set {
        this._ETH = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the currency. For more details, see Documentation &gt; General &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("edp")]
    public decimal Edp {
      get {
        return this._Edp;
      }
      set {
        this._Edp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BTC;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _ETH;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Edp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetIndexPriceResponse {
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Documentation &gt; General &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Value of requested index</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetInstrumentResponse {
    
    /// <summary>
    /// <para>The underlying currency being traded.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("base_currency")]
    public string BaseCurrency {
      get {
        return this._BaseCurrency;
      }
      set {
        this._BaseCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Block Trade commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_commission")]
    public decimal BlockTradeCommission {
      get {
        return this._BlockTradeCommission;
      }
      set {
        this._BlockTradeCommission = value;
      }
    }
    
    /// <summary>
    /// <para>Contract size for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("contract_size")]
    public int ContractSize {
      get {
        return this._ContractSize;
      }
      set {
        this._ContractSize = value;
      }
    }
    
    /// <summary>
    /// <para>Counter currency for the instrument.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("counter_currency")]
    public string CounterCurrency {
      get {
        return this._CounterCurrency;
      }
      set {
        this._CounterCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The time when the instrument was first created (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The time when the instrument will expire (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expiration_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ExpirationTimestamp {
      get {
        return this._ExpirationTimestamp;
      }
      set {
        this._ExpirationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Future type (only for futures)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("future_type")]
    public System.String? FutureType {
      get {
        return this._FutureType;
      }
      set {
        this._FutureType = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument ID</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_id")]
    public int InstrumentId {
      get {
        return this._InstrumentId;
      }
      set {
        this._InstrumentId = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Indicates if the instrument can currently be traded.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_active")]
    public bool IsActive {
      get {
        return this._IsActive;
      }
      set {
        this._IsActive = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Maximal leverage for instrument, for futures only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("leverage")]
    public int Leverage {
      get {
        return this._Leverage;
      }
      set {
        this._Leverage = value;
      }
    }
    
    /// <summary>
    /// <para>Maker commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maker_commission")]
    public decimal MakerCommission {
      get {
        return this._MakerCommission;
      }
      set {
        this._MakerCommission = value;
      }
    }
    
    /// <summary>
    /// <para>Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_trade_amount")]
    public decimal MinTradeAmount {
      get {
        return this._MinTradeAmount;
      }
      set {
        this._MinTradeAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The option type (only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("option_type")]
    public System.String? OptionType {
      get {
        return this._OptionType;
      }
      set {
        this._OptionType = value;
      }
    }
    
    /// <summary>
    /// <para>Name of price index that is used for this instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_index")]
    public string PriceIndex {
      get {
        return this._PriceIndex;
      }
      set {
        this._PriceIndex = value;
      }
    }
    
    /// <summary>
    /// <para>The currency in which the instrument prices are quoted.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quote_currency")]
    public string QuoteCurrency {
      get {
        return this._QuoteCurrency;
      }
      set {
        this._QuoteCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement currency for the instrument.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_currency")]
    public string SettlementCurrency {
      get {
        return this._SettlementCurrency;
      }
      set {
        this._SettlementCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement period.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_period")]
    public string SettlementPeriod {
      get {
        return this._SettlementPeriod;
      }
      set {
        this._SettlementPeriod = value;
      }
    }
    
    /// <summary>
    /// <para>The strike value. (only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("strike")]
    public System.Decimal? Strike {
      get {
        return this._Strike;
      }
      set {
        this._Strike = value;
      }
    }
    
    /// <summary>
    /// <para>Taker commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("taker_commission")]
    public decimal TakerCommission {
      get {
        return this._TakerCommission;
      }
      set {
        this._TakerCommission = value;
      }
    }
    
    /// <summary>
    /// <para>specifies minimal price change and, as follows, the number of decimal places for instrument prices</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_size")]
    public decimal TickSize {
      get {
        return this._TickSize;
      }
      set {
        this._TickSize = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BaseCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BlockTradeCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ContractSize;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CounterCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ExpirationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _FutureType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _InstrumentId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsActive;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Leverage;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MakerCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinTradeAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OptionType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PriceIndex = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _QuoteCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SettlementCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SettlementPeriod = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Strike;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TakerCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TickSize;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetInstrumentsResponse {
    
    /// <summary>
    /// <para>The underlying currency being traded.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("base_currency")]
    public string BaseCurrency {
      get {
        return this._BaseCurrency;
      }
      set {
        this._BaseCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Block Trade commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_commission")]
    public decimal BlockTradeCommission {
      get {
        return this._BlockTradeCommission;
      }
      set {
        this._BlockTradeCommission = value;
      }
    }
    
    /// <summary>
    /// <para>Contract size for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("contract_size")]
    public int ContractSize {
      get {
        return this._ContractSize;
      }
      set {
        this._ContractSize = value;
      }
    }
    
    /// <summary>
    /// <para>Counter currency for the instrument.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("counter_currency")]
    public string CounterCurrency {
      get {
        return this._CounterCurrency;
      }
      set {
        this._CounterCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The time when the instrument was first created (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The time when the instrument will expire (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("expiration_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ExpirationTimestamp {
      get {
        return this._ExpirationTimestamp;
      }
      set {
        this._ExpirationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Future type (only for futures)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("future_type")]
    public System.String? FutureType {
      get {
        return this._FutureType;
      }
      set {
        this._FutureType = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument ID</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_id")]
    public int InstrumentId {
      get {
        return this._InstrumentId;
      }
      set {
        this._InstrumentId = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Indicates if the instrument can currently be traded.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_active")]
    public bool IsActive {
      get {
        return this._IsActive;
      }
      set {
        this._IsActive = value;
      }
    }
    
    /// <summary>
    /// <para>Instrument kind, <c>&quot;future&quot;</c> or <c>&quot;option&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("kind")]
    public string Kind {
      get {
        return this._Kind;
      }
      set {
        this._Kind = value;
      }
    }
    
    /// <summary>
    /// <para>Maximal leverage for instrument, for futures only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("leverage")]
    public int Leverage {
      get {
        return this._Leverage;
      }
      set {
        this._Leverage = value;
      }
    }
    
    /// <summary>
    /// <para>Maker commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maker_commission")]
    public decimal MakerCommission {
      get {
        return this._MakerCommission;
      }
      set {
        this._MakerCommission = value;
      }
    }
    
    /// <summary>
    /// <para>Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_trade_amount")]
    public decimal MinTradeAmount {
      get {
        return this._MinTradeAmount;
      }
      set {
        this._MinTradeAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The option type (only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("option_type")]
    public System.String? OptionType {
      get {
        return this._OptionType;
      }
      set {
        this._OptionType = value;
      }
    }
    
    /// <summary>
    /// <para>Name of price index that is used for this instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_index")]
    public string PriceIndex {
      get {
        return this._PriceIndex;
      }
      set {
        this._PriceIndex = value;
      }
    }
    
    /// <summary>
    /// <para>The currency in which the instrument prices are quoted.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("quote_currency")]
    public string QuoteCurrency {
      get {
        return this._QuoteCurrency;
      }
      set {
        this._QuoteCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Settlement currency for the instrument.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_currency")]
    public string SettlementCurrency {
      get {
        return this._SettlementCurrency;
      }
      set {
        this._SettlementCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement period.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_period")]
    public string SettlementPeriod {
      get {
        return this._SettlementPeriod;
      }
      set {
        this._SettlementPeriod = value;
      }
    }
    
    /// <summary>
    /// <para>The strike value. (only for options)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("strike")]
    public System.Decimal? Strike {
      get {
        return this._Strike;
      }
      set {
        this._Strike = value;
      }
    }
    
    /// <summary>
    /// <para>Taker commission for instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("taker_commission")]
    public decimal TakerCommission {
      get {
        return this._TakerCommission;
      }
      set {
        this._TakerCommission = value;
      }
    }
    
    /// <summary>
    /// <para>specifies minimal price change and, as follows, the number of decimal places for instrument prices</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_size")]
    public decimal TickSize {
      get {
        return this._TickSize;
      }
      set {
        this._TickSize = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BaseCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BlockTradeCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ContractSize;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CounterCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ExpirationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _FutureType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _InstrumentId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsActive;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Kind = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Leverage;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MakerCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinTradeAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OptionType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PriceIndex = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _QuoteCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SettlementCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _SettlementPeriod = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Strike;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TakerCommission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TickSize;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastSettlementsByCurrencyResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public string Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlements")]
    public SettlementEntry[] Settlements {
      get {
        return this._Settlements;
      }
      set {
        this._Settlements = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Continuation = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementEntry[] _Settlements = System.Array.Empty<SettlementEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastSettlementsByInstrumentResponse {
    
    /// <summary>
    /// <para>Continuation token for pagination.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public string Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlements")]
    public SettlementEntry[] Settlements {
      get {
        return this._Settlements;
      }
      set {
        this._Settlements = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Continuation = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private SettlementEntry[] _Settlements = System.Array.Empty<SettlementEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByCurrencyResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public PublicTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PublicTrade[] _Trades = System.Array.Empty<PublicTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByCurrencyAndTimeResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public PublicTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PublicTrade[] _Trades = System.Array.Empty<PublicTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByInstrumentResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public PublicTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PublicTrade[] _Trades = System.Array.Empty<PublicTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetLastTradesByInstrumentAndTimeResponse {
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("has_more")]
    public bool HasMore {
      get {
        return this._HasMore;
      }
      set {
        this._HasMore = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public PublicTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HasMore;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private PublicTrade[] _Trades = System.Array.Empty<PublicTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetOrderBookResponse {
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best ask</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_iv")]
    public System.Decimal? AskIv {
      get {
        return this._AskIv;
      }
      set {
        this._AskIv = value;
      }
    }
    
    /// <summary>
    /// <para>List of asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("asks")]
    public DeriSock.Model.PriceAmountItem[] Asks {
      get {
        return this._Asks;
      }
      set {
        this._Asks = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best bid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_iv")]
    public System.Decimal? BidIv {
      get {
        return this._BidIv;
      }
      set {
        this._BidIv = value;
      }
    }
    
    /// <summary>
    /// <para>List of bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bids")]
    public DeriSock.Model.PriceAmountItem[] Bids {
      get {
        return this._Bids;
      }
      set {
        this._Bids = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("greeks")]
    public OptionGreek? Greeks {
      get {
        return this._Greeks;
      }
      set {
        this._Greeks = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price for the last trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_price")]
    public decimal LastPrice {
      get {
        return this._LastPrice;
      }
      set {
        this._LastPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for mark price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_iv")]
    public System.Decimal? MarkIv {
      get {
        return this._MarkIv;
      }
      set {
        this._MarkIv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = open</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public System.Decimal? SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The state of the order book. Possible values are <c>open</c> and <c>closed</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("stats")]
    public OrderBookStats Stats {
      get {
        return this._Stats;
      }
      set {
        this._Stats = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>index_price</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.Decimal? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AskIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Asks = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BidIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Bids = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OptionGreek? _Greeks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LastPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OrderBookStats _Stats = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetOrderBookByInstrumentIdResponse {
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best ask</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_iv")]
    public System.Decimal? AskIv {
      get {
        return this._AskIv;
      }
      set {
        this._AskIv = value;
      }
    }
    
    /// <summary>
    /// <para>List of asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("asks")]
    public DeriSock.Model.PriceAmountItem[] Asks {
      get {
        return this._Asks;
      }
      set {
        this._Asks = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best bid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_iv")]
    public System.Decimal? BidIv {
      get {
        return this._BidIv;
      }
      set {
        this._BidIv = value;
      }
    }
    
    /// <summary>
    /// <para>List of bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bids")]
    public DeriSock.Model.PriceAmountItem[] Bids {
      get {
        return this._Bids;
      }
      set {
        this._Bids = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("greeks")]
    public OptionGreek? Greeks {
      get {
        return this._Greeks;
      }
      set {
        this._Greeks = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price for the last trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_price")]
    public decimal LastPrice {
      get {
        return this._LastPrice;
      }
      set {
        this._LastPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for mark price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_iv")]
    public System.Decimal? MarkIv {
      get {
        return this._MarkIv;
      }
      set {
        this._MarkIv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = open</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public System.Decimal? SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The state of the order book. Possible values are <c>open</c> and <c>closed</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("stats")]
    public OrderBookStats Stats {
      get {
        return this._Stats;
      }
      set {
        this._Stats = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>index_price</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.Decimal? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AskIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Asks = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BidIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Bids = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OptionGreek? _Greeks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LastPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OrderBookStats _Stats = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetRfqsResponse {
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of last RFQ (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_rfq_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastRfqTimestamp {
      get {
        return this._LastRfqTimestamp;
      }
      set {
        this._LastRfqTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Side - <c>buy</c> or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("side")]
    public string Side {
      get {
        return this._Side;
      }
      set {
        this._Side = value;
      }
    }
    
    /// <summary>
    /// <para>Volume traded since last RFQ</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("traded_volume")]
    public decimal TradedVolume {
      get {
        return this._TradedVolume;
      }
      set {
        this._TradedVolume = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastRfqTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Side = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TradedVolume;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetTradeVolumesResponse {
    
    /// <summary>
    /// <para>Total 24h trade volume for call options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("calls_volume")]
    public decimal CallsVolume {
      get {
        return this._CallsVolume;
      }
      set {
        this._CallsVolume = value;
      }
    }
    
    /// <summary>
    /// <para>Total 30d trade volume for call options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("calls_volume_30d")]
    public decimal CallsVolume30D {
      get {
        return this._CallsVolume30D;
      }
      set {
        this._CallsVolume30D = value;
      }
    }
    
    /// <summary>
    /// <para>Total 7d trade volume for call options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("calls_volume_7d")]
    public decimal CallsVolume7D {
      get {
        return this._CallsVolume7D;
      }
      set {
        this._CallsVolume7D = value;
      }
    }
    
    /// <summary>
    /// <para>Currency pair: <c>&quot;btc_usd&quot;</c> or <c>&quot;eth_usd&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency_pair")]
    public string CurrencyPair {
      get {
        return this._CurrencyPair;
      }
      set {
        this._CurrencyPair = value;
      }
    }
    
    /// <summary>
    /// <para>Total 24h trade volume for futures. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_volume")]
    public decimal FuturesVolume {
      get {
        return this._FuturesVolume;
      }
      set {
        this._FuturesVolume = value;
      }
    }
    
    /// <summary>
    /// <para>Total 30d trade volume for futures. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_volume_30d")]
    public decimal FuturesVolume30D {
      get {
        return this._FuturesVolume30D;
      }
      set {
        this._FuturesVolume30D = value;
      }
    }
    
    /// <summary>
    /// <para>Total 7d trade volume for futures. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_volume_7d")]
    public decimal FuturesVolume7D {
      get {
        return this._FuturesVolume7D;
      }
      set {
        this._FuturesVolume7D = value;
      }
    }
    
    /// <summary>
    /// <para>Total 24h trade volume for put options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("puts_volume")]
    public decimal PutsVolume {
      get {
        return this._PutsVolume;
      }
      set {
        this._PutsVolume = value;
      }
    }
    
    /// <summary>
    /// <para>Total 30d trade volume for put options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("puts_volume_30d")]
    public decimal PutsVolume30D {
      get {
        return this._PutsVolume30D;
      }
      set {
        this._PutsVolume30D = value;
      }
    }
    
    /// <summary>
    /// <para>Total 7d trade volume for put options. This is expressed in the base currency, e.g. BTC for <c>btc_usd</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("puts_volume_7d")]
    public decimal PutsVolume7D {
      get {
        return this._PutsVolume7D;
      }
      set {
        this._PutsVolume7D = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _CallsVolume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _CallsVolume30D;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _CallsVolume7D;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _CurrencyPair = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesVolume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesVolume30D;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesVolume7D;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PutsVolume;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PutsVolume30D;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _PutsVolume7D;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetTradingviewChartDataResponse {
    
    /// <summary>
    /// <para>List of prices at close (one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("close")]
    public decimal[] Close {
      get {
        return this._Close;
      }
      set {
        this._Close = value;
      }
    }
    
    /// <summary>
    /// <para>List of cost bars (volume in quote currency, one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("cost")]
    public decimal[] Cost {
      get {
        return this._Cost;
      }
      set {
        this._Cost = value;
      }
    }
    
    /// <summary>
    /// <para>List of highest price levels (one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high")]
    public decimal[] High {
      get {
        return this._High;
      }
      set {
        this._High = value;
      }
    }
    
    /// <summary>
    /// <para>List of lowest price levels (one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low")]
    public decimal[] Low {
      get {
        return this._Low;
      }
      set {
        this._Low = value;
      }
    }
    
    /// <summary>
    /// <para>List of prices at open (one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open")]
    public decimal[] Open {
      get {
        return this._Open;
      }
      set {
        this._Open = value;
      }
    }
    
    /// <summary>
    /// <para>Status of the query: <c>ok</c> or <c>no_data</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("status")]
    public string Status {
      get {
        return this._Status;
      }
      set {
        this._Status = value;
      }
    }
    
    /// <summary>
    /// <para>Values of the time axis given in milliseconds since UNIX epoch</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ticks")]
    public int[] Ticks {
      get {
        return this._Ticks;
      }
      set {
        this._Ticks = value;
      }
    }
    
    /// <summary>
    /// <para>List of volume bars (in base currency, one per candle)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume")]
    public decimal[] Volume {
      get {
        return this._Volume;
      }
      set {
        this._Volume = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _Close = System.Array.Empty<System.Decimal>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _Cost = System.Array.Empty<System.Decimal>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _High = System.Array.Empty<System.Decimal>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _Low = System.Array.Empty<System.Decimal>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _Open = System.Array.Empty<System.Decimal>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Status = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int[] _Ticks = System.Array.Empty<System.Int32>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal[] _Volume = System.Array.Empty<System.Decimal>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicGetVolatilityIndexDataResponse {
    
    /// <summary>
    /// <para>Continuation - to be used as the <c>end_timestamp</c> parameter on the next request. <c>NULL</c> when no continuation.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("continuation")]
    public int Continuation {
      get {
        return this._Continuation;
      }
      set {
        this._Continuation = value;
      }
    }
    
    /// <summary>
    /// <para>Candles as an array of arrays with 5 values each. The inner values correspond to the timestamp in ms, open, high, low, and close values of the volatility index correspondingly.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public VolatilityIndexCandle[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Continuation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private VolatilityIndexCandle[] _Data = System.Array.Empty<VolatilityIndexCandle>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PublicTickerResponse {
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best ask</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_iv")]
    public System.Decimal? AskIv {
      get {
        return this._AskIv;
      }
      set {
        this._AskIv = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best bid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_iv")]
    public System.Decimal? BidIv {
      get {
        return this._BidIv;
      }
      set {
        this._BidIv = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Contract Specification &gt; General Documentation &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("greeks")]
    public OptionGreek? Greeks {
      get {
        return this._Greeks;
      }
      set {
        this._Greeks = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price for the last trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_price")]
    public decimal LastPrice {
      get {
        return this._LastPrice;
      }
      set {
        this._LastPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for mark price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_iv")]
    public System.Decimal? MarkIv {
      get {
        return this._MarkIv;
      }
      set {
        this._MarkIv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = open</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public System.Decimal? SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The state of the order book. Possible values are <c>open</c> and <c>closed</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("stats")]
    public OrderBookStats Stats {
      get {
        return this._Stats;
      }
      set {
        this._Stats = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>index_price</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.Decimal? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AskIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BidIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OptionGreek? _Greeks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LastPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OrderBookStats _Stats = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelTransferByIdResponse {
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer direction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Id of transfer</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("other_side")]
    public string OtherSide {
      get {
        return this._OtherSide;
      }
      set {
        this._OtherSide = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer state, allowed values : <c>prepared</c>, <c>confirmed</c>, <c>cancelled</c>, <c>waiting_for_admin</c> otherwise rejection reason</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Type of transfer: <c>user</c> - sent to user, <c>subaccount</c> - sent to subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OtherSide = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCancelWithdrawalResponse {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, <c>null</c> when not confirmed</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmed_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ConfirmedTimestamp {
      get {
        return this._ConfirmedTimestamp;
      }
      set {
        this._ConfirmedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Fee in currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal id in Deribit system</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Id of priority level</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("priority")]
    public decimal Priority {
      get {
        return this._Priority;
      }
      set {
        this._Priority = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal state, allowed values : <c>unconfirmed</c>, <c>confirmed</c>, <c>cancelled</c>, <c>completed</c>, <c>interrupted</c>, <c>rejected</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Transaction id in proper format for currency, <c>null</c> if id is not available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("transaction_id")]
    public string TransactionId {
      get {
        return this._TransactionId;
      }
      set {
        this._TransactionId = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ConfirmedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Priority;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TransactionId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateCreateDepositAddressResponse {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Address type/purpose, allowed values : <c>deposit</c>, <c>withdrawal</c>, <c>transfer</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetCurrentDepositAddressResponse {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Address type/purpose, allowed values : <c>deposit</c>, <c>withdrawal</c>, <c>transfer</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetDepositsResponse {
    
    /// <summary>
    /// <para>Total number of results available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public int Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public DepositEntry[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DepositEntry[] _Data = System.Array.Empty<DepositEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetTransfersResponse {
    
    /// <summary>
    /// <para>Total number of results available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public int Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public TransferEntry[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private TransferEntry[] _Data = System.Array.Empty<TransferEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateGetWithdrawalsResponse {
    
    /// <summary>
    /// <para>Total number of results available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("count")]
    public int Count {
      get {
        return this._Count;
      }
      set {
        this._Count = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public WithdrawalEntry[] Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Count;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private WithdrawalEntry[] _Data = System.Array.Empty<WithdrawalEntry>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSubmitTransferToSubaccountResponse {
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer direction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Id of transfer</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("other_side")]
    public string OtherSide {
      get {
        return this._OtherSide;
      }
      set {
        this._OtherSide = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer state, allowed values : <c>prepared</c>, <c>confirmed</c>, <c>cancelled</c>, <c>waiting_for_admin</c> otherwise rejection reason</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Type of transfer: <c>user</c> - sent to user, <c>subaccount</c> - sent to subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OtherSide = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateSubmitTransferToUserResponse {
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer direction</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Id of transfer</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("other_side")]
    public string OtherSide {
      get {
        return this._OtherSide;
      }
      set {
        this._OtherSide = value;
      }
    }
    
    /// <summary>
    /// <para>Transfer state, allowed values : <c>prepared</c>, <c>confirmed</c>, <c>cancelled</c>, <c>waiting_for_admin</c> otherwise rejection reason</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Type of transfer: <c>user</c> - sent to user, <c>subaccount</c> - sent to subaccount</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OtherSide = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PrivateWithdrawResponse {
    
    /// <summary>
    /// <para>Address in proper format for currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("address")]
    public string Address {
      get {
        return this._Address;
      }
      set {
        this._Address = value;
      }
    }
    
    /// <summary>
    /// <para>Amount of funds in given currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, <c>null</c> when not confirmed</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmed_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime ConfirmedTimestamp {
      get {
        return this._ConfirmedTimestamp;
      }
      set {
        this._ConfirmedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("created_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreatedTimestamp {
      get {
        return this._CreatedTimestamp;
      }
      set {
        this._CreatedTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>Fee in currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal id in Deribit system</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Id of priority level</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("priority")]
    public decimal Priority {
      get {
        return this._Priority;
      }
      set {
        this._Priority = value;
      }
    }
    
    /// <summary>
    /// <para>Withdrawal state, allowed values : <c>unconfirmed</c>, <c>confirmed</c>, <c>cancelled</c>, <c>completed</c>, <c>interrupted</c>, <c>rejected</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Transaction id in proper format for currency, <c>null</c> if id is not available</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("transaction_id")]
    public string TransactionId {
      get {
        return this._TransactionId;
      }
      set {
        this._TransactionId = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("updated_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime UpdatedTimestamp {
      get {
        return this._UpdatedTimestamp;
      }
      set {
        this._UpdatedTimestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Address = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _ConfirmedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreatedTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Priority;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TransactionId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _UpdatedTimestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class AnnouncementsResponse {
    
    /// <summary>
    /// <para>Action taken by the platform administrators. Published a <c>new</c> announcement, or <c>delete</c>d the old one</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("action")]
    public string Action {
      get {
        return this._Action;
      }
      set {
        this._Action = value;
      }
    }
    
    /// <summary>
    /// <para>HTML-formatted announcement body</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("body")]
    public string Body {
      get {
        return this._Body;
      }
      set {
        this._Body = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the user confirmation is required for this announcement</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("confirmation")]
    public bool Confirmation {
      get {
        return this._Confirmation;
      }
      set {
        this._Confirmation = value;
      }
    }
    
    /// <summary>
    /// <para>Announcement&apos;s identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the announcement is marked as important</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("important")]
    public bool Important {
      get {
        return this._Important;
      }
      set {
        this._Important = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch) of announcement publication</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("publication_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime PublicationTimestamp {
      get {
        return this._PublicationTimestamp;
      }
      set {
        this._PublicationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Announcement&apos;s title</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("title")]
    public string Title {
      get {
        return this._Title;
      }
      set {
        this._Title = value;
      }
    }
    
    /// <summary>
    /// <para>The number of previous unread announcements (optional, only for authorized users).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("unread")]
    public System.Int32? Unread {
      get {
        return this._Unread;
      }
      set {
        this._Unread = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Action = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Body = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Confirmation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Important;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _PublicationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Title = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Int32? _Unread;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BookInstrumentNameGroupDepthIntervalResponse {
    
    /// <summary>
    /// <para>List of asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("asks")]
    public DeriSock.Model.PriceAmountItem[] Asks {
      get {
        return this._Asks;
      }
      set {
        this._Asks = value;
      }
    }
    
    /// <summary>
    /// <para>List of bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bids")]
    public DeriSock.Model.PriceAmountItem[] Bids {
      get {
        return this._Bids;
      }
      set {
        this._Bids = value;
      }
    }
    
    /// <summary>
    /// <para>id of the notification</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("change_id")]
    public int ChangeId {
      get {
        return this._ChangeId;
      }
      set {
        this._ChangeId = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of last change (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Asks = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.PriceAmountItem[] _Bids = System.Array.Empty<DeriSock.Model.PriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ChangeId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BookInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>The first notification will contain the amounts for all price levels (a list of [&quot;new&quot;, price, amount] tuples). All following notifications will contain a list of tuples with action, price level and new amount ([action, price, amount]). Action can be <c>new</c>, <c>change</c> or <c>delete</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("asks")]
    public DeriSock.Model.ActionPriceAmountItem[] Asks {
      get {
        return this._Asks;
      }
      set {
        this._Asks = value;
      }
    }
    
    /// <summary>
    /// <para>(See &apos;asks&apos; above.)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bids")]
    public DeriSock.Model.ActionPriceAmountItem[] Bids {
      get {
        return this._Bids;
      }
      set {
        this._Bids = value;
      }
    }
    
    /// <summary>
    /// <para>Identifier of the notification</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("change_id")]
    public int ChangeId {
      get {
        return this._ChangeId;
      }
      set {
        this._ChangeId = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Identifier of the previous notification (it&apos;s <b>not</b> included for the first notification)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("prev_change_id")]
    public int PrevChangeId {
      get {
        return this._PrevChangeId;
      }
      set {
        this._PrevChangeId = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of last change (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Type of notification: <c>snapshot</c> for initial, <c>change</c> for others. The field is only included in aggregated response (when input parameter <c>interval</c> != <c>raw</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("type")]
    public string Type {
      get {
        return this._Type;
      }
      set {
        this._Type = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.ActionPriceAmountItem[] _Asks = System.Array.Empty<DeriSock.Model.ActionPriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.ActionPriceAmountItem[] _Bids = System.Array.Empty<DeriSock.Model.ActionPriceAmountItem>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _ChangeId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _PrevChangeId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Type = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class ChartTradesInstrumentNameResolutionResponse {
    
    /// <summary>
    /// <para>The close price for the candle</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("close")]
    public decimal Close {
      get {
        return this._Close;
      }
      set {
        this._Close = value;
      }
    }
    
    /// <summary>
    /// <para>Cost data for the candle</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("cost")]
    public decimal Cost {
      get {
        return this._Cost;
      }
      set {
        this._Cost = value;
      }
    }
    
    /// <summary>
    /// <para>The highest price level for the candle</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high")]
    public decimal High {
      get {
        return this._High;
      }
      set {
        this._High = value;
      }
    }
    
    /// <summary>
    /// <para>The lowest price level for the candle</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low")]
    public decimal Low {
      get {
        return this._Low;
      }
      set {
        this._Low = value;
      }
    }
    
    /// <summary>
    /// <para>The open price for the candle&apos;</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open")]
    public decimal Open {
      get {
        return this._Open;
      }
      set {
        this._Open = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick")]
    public int Tick {
      get {
        return this._Tick;
      }
      set {
        this._Tick = value;
      }
    }
    
    /// <summary>
    /// <para>Volume data for the candle</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volume")]
    public decimal Volume {
      get {
        return this._Volume;
      }
      set {
        this._Volume = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Close;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Cost;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _High;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Low;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Open;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Tick;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Volume;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceIndexIndexNameResponse {
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public string IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _IndexName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceRankingIndexNameResponse {
    
    /// <summary>
    /// <para>Stock exchange status</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("enabled")]
    public bool Enabled {
      get {
        return this._Enabled;
      }
      set {
        this._Enabled = value;
      }
    }
    
    /// <summary>
    /// <para>Stock exchange identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("identifier")]
    public string Identifier {
      get {
        return this._Identifier;
      }
      set {
        this._Identifier = value;
      }
    }
    
    /// <summary>
    /// <para>Index price retrieved from stock&apos;s data</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_price")]
    public decimal OriginalPrice {
      get {
        return this._OriginalPrice;
      }
      set {
        this._OriginalPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Adjusted stock exchange index price, used for Deribit price index calculations</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the last update from stock exchange (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>The weight of the ranking given in percent</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("weight")]
    public decimal Weight {
      get {
        return this._Weight;
      }
      set {
        this._Weight = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Enabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Identifier = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OriginalPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Weight;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitPriceStatisticsIndexNameResponse {
    
    /// <summary>
    /// <para>The price index change calculated between the first and last point within most recent 24 hours window</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("change24h")]
    public decimal Change24h {
      get {
        return this._Change24h;
      }
      set {
        this._Change24h = value;
      }
    }
    
    /// <summary>
    /// <para>The highest recorded price within the last 24 hours</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high24h")]
    public decimal High24h {
      get {
        return this._High24h;
      }
      set {
        this._High24h = value;
      }
    }
    
    /// <summary>
    /// <para>Indicates the high volatility periods on the market. The value <c>true</c> is set when the price index value drastically changed within the last 5 minutes</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("high_volatility")]
    public bool HighVolatility {
      get {
        return this._HighVolatility;
      }
      set {
        this._HighVolatility = value;
      }
    }
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public string IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    /// <summary>
    /// <para>The lowest recorded price within the last 24 hours</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("low24h")]
    public decimal Low24h {
      get {
        return this._Low24h;
      }
      set {
        this._Low24h = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Change24h;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _High24h;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _HighVolatility;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _IndexName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Low24h;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class DeribitVolatilityIndexIndexNameResponse {
    
    /// <summary>
    /// <para>Time-weighted average of the volatility near the expiration otherwise equal to the volatility field.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery")]
    public decimal EstimatedDelivery {
      get {
        return this._EstimatedDelivery;
      }
      set {
        this._EstimatedDelivery = value;
      }
    }
    
    /// <summary>
    /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_name")]
    public string IndexName {
      get {
        return this._IndexName;
      }
      set {
        this._IndexName = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Value of the corresponding volatility</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("volatility")]
    public decimal Volatility {
      get {
        return this._Volatility;
      }
      set {
        this._Volatility = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDelivery;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _IndexName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Volatility;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class EstimatedExpirationPriceIndexNameResponse {
    
    /// <summary>
    /// <para>When <c>true</c> then price is given as an estimated value, otherwise it&apos;s current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_estimated")]
    public bool IsEstimated {
      get {
        return this._IsEstimated;
      }
      set {
        this._IsEstimated = value;
      }
    }
    
    /// <summary>
    /// <para>number of time ticks that are left until expiration (field added when price is estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("left_ticks")]
    public decimal LeftTicks {
      get {
        return this._LeftTicks;
      }
      set {
        this._LeftTicks = value;
      }
    }
    
    /// <summary>
    /// <para>Index current or estimated price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Number of seconds till finalizing the nearest instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("seconds")]
    public int Seconds {
      get {
        return this._Seconds;
      }
      set {
        this._Seconds = value;
      }
    }
    
    /// <summary>
    /// <para>number of total time ticks (field added when price is estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_ticks")]
    public decimal TotalTicks {
      get {
        return this._TotalTicks;
      }
      set {
        this._TotalTicks = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsEstimated;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LeftTicks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Seconds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalTicks;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class IncrementalTickerInstrumentNameResponse {
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best ask</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_iv")]
    public System.Decimal? AskIv {
      get {
        return this._AskIv;
      }
      set {
        this._AskIv = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best bid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_iv")]
    public System.Decimal? BidIv {
      get {
        return this._BidIv;
      }
      set {
        this._BidIv = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Contract Specification &gt; General Documentation &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("greeks")]
    public OptionGreek? Greeks {
      get {
        return this._Greeks;
      }
      set {
        this._Greeks = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price for the last trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_price")]
    public decimal LastPrice {
      get {
        return this._LastPrice;
      }
      set {
        this._LastPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for mark price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_iv")]
    public System.Decimal? MarkIv {
      get {
        return this._MarkIv;
      }
      set {
        this._MarkIv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = open</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public System.Decimal? SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The state of the order book. Possible values are <c>open</c> and <c>closed</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("stats")]
    public OrderBookStats Stats {
      get {
        return this._Stats;
      }
      set {
        this._Stats = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>index_price</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.Decimal? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AskIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BidIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OptionGreek? _Greeks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LastPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OrderBookStats _Stats = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class InstrumentStateKindCurrencyResponse {
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>State of instrument - possible values: <c>created</c>, <c>started</c>, <c>settled</c>, <c>closed</c>, <c>terminated</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class MarkpriceOptionsIndexNameResponse {
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Value of the volatility of the underlying instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public decimal Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PerpetualInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Current interest</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest")]
    public decimal Interest {
      get {
        return this._Interest;
      }
      set {
        this._Interest = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Interest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PlatformStateResponse {
    
    /// <summary>
    /// <para>Value is set to &apos;true&apos; when index is locked on platform, sent only with <c>price_index</c> field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("locked")]
    public bool Locked {
      get {
        return this._Locked;
      }
      set {
        this._Locked = value;
      }
    }
    
    /// <summary>
    /// <para>Value is set to <c>true</c> when the maintenance break begins</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance")]
    public bool Maintenance {
      get {
        return this._Maintenance;
      }
      set {
        this._Maintenance = value;
      }
    }
    
    /// <summary>
    /// <para>Name of index that is locked or unlocked, sent only with <c>locked</c> field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price_index")]
    public string PriceIndex {
      get {
        return this._PriceIndex;
      }
      set {
        this._PriceIndex = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Locked;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Maintenance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PriceIndex = string.Empty;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PlatformStatePublicMethodsStateResponse {
    
    /// <summary>
    /// <para>Value is set to &apos;true&apos; when unauthorized public requests are allowed</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("allow_unauthenticated_public_requests")]
    public bool AllowUnauthenticatedPublicRequests {
      get {
        return this._AllowUnauthenticatedPublicRequests;
      }
      set {
        this._AllowUnauthenticatedPublicRequests = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AllowUnauthenticatedPublicRequests;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class QuoteInstrumentNameResponse {
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class RfqCurrencyResponse {
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of last RFQ (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_rfq_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastRfqTimestamp {
      get {
        return this._LastRfqTimestamp;
      }
      set {
        this._LastRfqTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Side - <c>buy</c> or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("side")]
    public string Side {
      get {
        return this._Side;
      }
      set {
        this._Side = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> when RFQ is active, <c>false</c> when inactive</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public bool State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastRfqTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Side = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _State;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TickerInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best ask</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ask_iv")]
    public System.Decimal? AskIv {
      get {
        return this._AskIv;
      }
      set {
        this._AskIv = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_amount")]
    public decimal BestAskAmount {
      get {
        return this._BestAskAmount;
      }
      set {
        this._BestAskAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best ask price, <c>null</c> if there aren&apos;t any asks</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_ask_price")]
    public decimal BestAskPrice {
      get {
        return this._BestAskPrice;
      }
      set {
        this._BestAskPrice = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size of all best bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_amount")]
    public decimal BestBidAmount {
      get {
        return this._BestBidAmount;
      }
      set {
        this._BestBidAmount = value;
      }
    }
    
    /// <summary>
    /// <para>The current best bid price, <c>null</c> if there aren&apos;t any bids</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("best_bid_price")]
    public decimal BestBidPrice {
      get {
        return this._BestBidPrice;
      }
      set {
        this._BestBidPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for best bid</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("bid_iv")]
    public System.Decimal? BidIv {
      get {
        return this._BidIv;
      }
      set {
        this._BidIv = value;
      }
    }
    
    /// <summary>
    /// <para>Current funding (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("current_funding")]
    public System.Decimal? CurrentFunding {
      get {
        return this._CurrentFunding;
      }
      set {
        this._CurrentFunding = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = closed</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delivery_price")]
    public System.Decimal? DeliveryPrice {
      get {
        return this._DeliveryPrice;
      }
      set {
        this._DeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Estimated delivery price for the market. For more details, see Contract Specification &gt; General Documentation &gt; Expiration Price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_delivery_price")]
    public decimal EstimatedDeliveryPrice {
      get {
        return this._EstimatedDeliveryPrice;
      }
      set {
        this._EstimatedDeliveryPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Funding 8h (perpetual only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("funding_8h")]
    public System.Decimal? Funding8H {
      get {
        return this._Funding8H;
      }
      set {
        this._Funding8H = value;
      }
    }
    
    /// <summary>
    /// <para>Only for options</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("greeks")]
    public OptionGreek? Greeks {
      get {
        return this._Greeks;
      }
      set {
        this._Greeks = value;
      }
    }
    
    /// <summary>
    /// <para>Current index price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Interest rate used in implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("interest_rate")]
    public System.Decimal? InterestRate {
      get {
        return this._InterestRate;
      }
      set {
        this._InterestRate = value;
      }
    }
    
    /// <summary>
    /// <para>The price for the last trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_price")]
    public decimal LastPrice {
      get {
        return this._LastPrice;
      }
      set {
        this._LastPrice = value;
      }
    }
    
    /// <summary>
    /// <para>(Only for option) implied volatility for mark price</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_iv")]
    public System.Decimal? MarkIv {
      get {
        return this._MarkIv;
      }
      set {
        this._MarkIv = value;
      }
    }
    
    /// <summary>
    /// <para>The mark price for the instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_price")]
    public decimal MaxPrice {
      get {
        return this._MaxPrice;
      }
      set {
        this._MaxPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("min_price")]
    public decimal MinPrice {
      get {
        return this._MinPrice;
      }
      set {
        this._MinPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("open_interest")]
    public decimal OpenInterest {
      get {
        return this._OpenInterest;
      }
      set {
        this._OpenInterest = value;
      }
    }
    
    /// <summary>
    /// <para>The settlement price for the instrument. Only when <c>state = open</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("settlement_price")]
    public System.Decimal? SettlementPrice {
      get {
        return this._SettlementPrice;
      }
      set {
        this._SettlementPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The state of the order book. Possible values are <c>open</c> and <c>closed</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("stats")]
    public OrderBookStats Stats {
      get {
        return this._Stats;
      }
      set {
        this._Stats = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Name of the underlying future, or <c>index_price</c> (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_index")]
    public System.Decimal? UnderlyingIndex {
      get {
        return this._UnderlyingIndex;
      }
      set {
        this._UnderlyingIndex = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _AskIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestAskPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _BestBidPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _BidIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _CurrentFunding;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _DeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _EstimatedDeliveryPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Funding8H;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OptionGreek? _Greeks;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _InterestRate;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _LastPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _MarkIv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MinPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OpenInterest;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _SettlementPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private OrderBookStats _Stats = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingIndex;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradesInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradesKindCurrencyIntervalResponse {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserAccessLogResponse {
    
    /// <summary>
    /// <para>City where the IP address is registered (estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("city")]
    public string City {
      get {
        return this._City;
      }
      set {
        this._City = value;
      }
    }
    
    /// <summary>
    /// <para>Country where the IP address is registered (estimated)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("country")]
    public string Country {
      get {
        return this._Country;
      }
      set {
        this._Country = value;
      }
    }
    
    /// <summary>
    /// <para>Optional, additional information about action, type depends on <c>log</c> value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("data")]
    public DeriSock.Model.ObjectOrStringItem? Data {
      get {
        return this._Data;
      }
      set {
        this._Data = value;
      }
    }
    
    /// <summary>
    /// <para>Unique identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("id")]
    public int Id {
      get {
        return this._Id;
      }
      set {
        this._Id = value;
      }
    }
    
    /// <summary>
    /// <para>IP address of source that generated action</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("ip")]
    public string Ip {
      get {
        return this._Ip;
      }
      set {
        this._Ip = value;
      }
    }
    
    /// <summary>
    /// <para>Action description, values: <c>changed_email</c> - email was changed; <c>changed_password</c> - password was changed; <c>disabled_tfa</c> - TFA was disabled; <c>enabled_tfa</c> - TFA was enabled, <c>success</c> - successful login; <c>failure</c> - login failure; <c>enabled_subaccount_login</c> - login was enabled for subaccount (in <c>data</c> - subaccount uid); <c>disabled_subaccount_login</c> - login was disabled for subbaccount (in <c>data</c> - subbacount uid);<c>new_api_key</c> - API key was created (in <c>data</c> key client id); <c>removed_api_key</c> - API key was removed (in <c>data</c> key client id); <c>changed_scope</c> - scope of API key was changed (in <c>data</c> key client id); <c>changed_whitelist</c> - whitelist of API key was edited (in <c>data</c> key client id); <c>disabled_api_key</c> - API key was disabled (in <c>data</c> key client id); <c>enabled_api_key</c> - API key was enabled (in <c>data</c> key client id); <c>reset_api_key</c> - API key was reset (in <c>data</c> key client id)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("log")]
    public string Log {
      get {
        return this._Log;
      }
      set {
        this._Log = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _City = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Country = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DeriSock.Model.ObjectOrStringItem? _Data;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _Id;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Ip = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Log = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserChangesInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("orders")]
    public UserOrder[] Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("position")]
    public UserPosition[] Position {
      get {
        return this._Position;
      }
      set {
        this._Position = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder[] _Orders = System.Array.Empty<UserOrder>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserPosition[] _Position = System.Array.Empty<UserPosition>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserChangesKindCurrencyIntervalResponse {
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("orders")]
    public UserOrder[] Orders {
      get {
        return this._Orders;
      }
      set {
        this._Orders = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("position")]
    public UserPosition[] Position {
      get {
        return this._Position;
      }
      set {
        this._Position = value;
      }
    }
    
    /// <summary>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trades")]
    public UserTrade[] Trades {
      get {
        return this._Trades;
      }
      set {
        this._Trades = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserOrder[] _Orders = System.Array.Empty<UserOrder>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserPosition[] _Position = System.Array.Empty<UserPosition>();
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private UserTrade[] _Trades = System.Array.Empty<UserTrade>();
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserMmpTriggerCurrencyResponse {
    
    /// <summary>
    /// <para>Timestamp (milliseconds since the UNIX epoch) until user will be frozen - 0 means that user is frozen until manual reset.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("frozen_until")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime FrozenUntil {
      get {
        return this._FrozenUntil;
      }
      set {
        this._FrozenUntil = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _FrozenUntil;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersInstrumentNameRawResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersKindCurrencyRawResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserOrdersKindCurrencyIntervalResponse {
    
    /// <summary>
    /// <para><c>true</c> if order was cancelled by mmp trigger (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mmp_cancelled")]
    public System.Boolean? MmpCancelled {
      get {
        return this._MmpCancelled;
      }
      set {
        this._MmpCancelled = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_state")]
    public string OrderState {
      get {
        return this._OrderState;
      }
      set {
        this._OrderState = value;
      }
    }
    
    /// <summary>
    /// <para>Maximum amount within an order to be shown to other traders, 0 for invisible order.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("max_show")]
    public decimal MaxShow {
      get {
        return this._MaxShow;
      }
      set {
        this._MaxShow = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order has <c>reject_post_only</c> flag (field is present only when <c>post_only</c> is <c>true</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reject_post_only")]
    public bool RejectPostOnly {
      get {
        return this._RejectPostOnly;
      }
      set {
        this._RejectPostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created with API</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("api")]
    public bool Api {
      get {
        return this._Api;
      }
      set {
        this._Api = value;
      }
    }
    
    /// <summary>
    /// <para>It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if created via Deribit frontend (optional)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("web")]
    public System.Boolean? Web {
      get {
        return this._Web;
      }
      set {
        this._Web = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>advanced type: <c>&quot;usd&quot;</c> or <c>&quot;implv&quot;</c> (Only for options; field is omitted if not applicable).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("advanced")]
    public System.String? Advanced {
      get {
        return this._Advanced;
      }
      set {
        this._Advanced = value;
      }
    }
    
    /// <summary>
    /// <para>Whether the trigger order has been triggered</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("triggered")]
    public bool Triggered {
      get {
        return this._Triggered;
      }
      set {
        this._Triggered = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order made from block_trade trade, added only in that case.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade")]
    public bool BlockTrade {
      get {
        return this._BlockTrade;
      }
      set {
        this._BlockTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Original order type. Optional field</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("original_order_type")]
    public System.String? OriginalOrderType {
      get {
        return this._OriginalOrderType;
      }
      set {
        this._OriginalOrderType = value;
      }
    }
    
    /// <summary>
    /// <para>The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_offset")]
    public System.Decimal? TriggerOffset {
      get {
        return this._TriggerOffset;
      }
      set {
        this._TriggerOffset = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Order time in force: <c>&quot;good_til_cancelled&quot;</c>, <c>&quot;good_til_day&quot;</c>, <c>&quot;fill_or_kill&quot;</c> or <c>&quot;immediate_or_cancel&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("time_in_force")]
    public string TimeInForce {
      get {
        return this._TimeInForce;
      }
      set {
        this._TimeInForce = value;
      }
    }
    
    /// <summary>
    /// <para>Options, advanced orders only - <c>true</c> if last modification of the order was performed by the pricing engine, otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("auto_replaced")]
    public bool AutoReplaced {
      get {
        return this._AutoReplaced;
      }
      set {
        this._AutoReplaced = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("last_update_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime LastUpdateTimestamp {
      get {
        return this._LastUpdateTimestamp;
      }
      set {
        this._LastUpdateTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for post-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public bool PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise <c>false</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("replaced")]
    public bool Replaced {
      get {
        return this._Replaced;
      }
      set {
        this._Replaced = value;
      }
    }
    
    /// <summary>
    /// <para>Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("filled_amount")]
    public decimal FilledAmount {
      get {
        return this._FilledAmount;
      }
      set {
        this._FilledAmount = value;
      }
    }
    
    /// <summary>
    /// <para>Average fill price of the order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("average_price")]
    public decimal AveragePrice {
      get {
        return this._AveragePrice;
      }
      set {
        this._AveragePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique order identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> for reduce-only orders only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public bool ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Commission paid so far (in base currency)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("commission")]
    public decimal Commission {
      get {
        return this._Commission;
      }
      set {
        this._Commission = value;
      }
    }
    
    /// <summary>
    /// <para>The name of the application that placed the order on behalf of the user (optional).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("app_name")]
    public System.String? AppName {
      get {
        return this._AppName;
      }
      set {
        this._AppName = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (up to 64 characters)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the trigger order that created the order (Only for orders that were created by triggered orders).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_order_id")]
    public System.String? TriggerOrderId {
      get {
        return this._TriggerOrderId;
      }
      set {
        this._TriggerOrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger price (Only for future trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_price")]
    public System.Decimal? TriggerPrice {
      get {
        return this._TriggerPrice;
      }
      set {
        this._TriggerPrice = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp (milliseconds since the Unix epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("creation_timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime CreationTimestamp {
      get {
        return this._CreationTimestamp;
      }
      set {
        this._CreationTimestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if order was automatically created during liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("is_liquidation")]
    public bool IsLiquidation {
      get {
        return this._IsLiquidation;
      }
      set {
        this._IsLiquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit&quot;</c>, <c>&quot;market&quot;</c>, <c>&quot;stop_limit&quot;</c>, <c>&quot;stop_market&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para>Option price in USD (Only if <c>advanced=&quot;usd&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("usd")]
    public decimal Usd {
      get {
        return this._Usd;
      }
      set {
        this._Usd = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para>The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger_reference_price")]
    public System.Decimal? TriggerReferencePrice {
      get {
        return this._TriggerReferencePrice;
      }
      set {
        this._TriggerReferencePrice = value;
      }
    }
    
    /// <summary>
    /// <para>Implied volatility in percent. (Only if <c>advanced=&quot;implv&quot;</c>)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("implv")]
    public decimal Implv {
      get {
        return this._Implv;
      }
      set {
        this._Implv = value;
      }
    }
    
    /// <summary>
    /// <para>Trigger type (only for trigger orders). Allowed values: <c>&quot;index_price&quot;</c>, <c>&quot;mark_price&quot;</c>, <c>&quot;last_price&quot;</c>.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trigger")]
    public System.String? Trigger {
      get {
        return this._Trigger;
      }
      set {
        this._Trigger = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _MmpCancelled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderState = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaxShow;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _RejectPostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Api;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Boolean? _Web;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Advanced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Triggered;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _BlockTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _OriginalOrderType;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerOffset;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TimeInForce = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _AutoReplaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _LastUpdateTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PostOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _Replaced;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FilledAmount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AveragePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _ReduceOnly;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Commission;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _AppName;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _TriggerOrderId;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _CreationTimestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _IsLiquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Usd;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _TriggerReferencePrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Implv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Trigger;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserPortfolioCurrencyResponse {
    
    /// <summary>
    /// <para>The account&apos;s available funds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_funds")]
    public decimal AvailableFunds {
      get {
        return this._AvailableFunds;
      }
      set {
        this._AvailableFunds = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s available to withdrawal funds</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("available_withdrawal_funds")]
    public decimal AvailableWithdrawalFunds {
      get {
        return this._AvailableWithdrawalFunds;
      }
      set {
        this._AvailableWithdrawalFunds = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s balance</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("balance")]
    public decimal Balance {
      get {
        return this._Balance;
      }
      set {
        this._Balance = value;
      }
    }
    
    /// <summary>
    /// <para>The selected currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("currency")]
    public string Currency {
      get {
        return this._Currency;
      }
      set {
        this._Currency = value;
      }
    }
    
    /// <summary>
    /// <para>The sum of position deltas</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta_total")]
    public decimal DeltaTotal {
      get {
        return this._DeltaTotal;
      }
      set {
        this._DeltaTotal = value;
      }
    }
    
    /// <summary>
    /// <para>Map of position sum&apos;s per index</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("delta_total_map")]
    public JObject DeltaTotalMap {
      get {
        return this._DeltaTotalMap;
      }
      set {
        this._DeltaTotalMap = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s current equity</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("equity")]
    public decimal Equity {
      get {
        return this._Equity;
      }
      set {
        this._Equity = value;
      }
    }
    
    /// <summary>
    /// <para>[DEPRECATED] Estimated Liquidation Ratio is returned only for users without portfolio margining enabled. Multiplying it by future position&apos;s market price returns its estimated liquidation price. Use estimated_liquidation_ratio_map instead.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ObsoleteAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_liquidation_ratio")]
    public System.Decimal? EstimatedLiquidationRatio {
      get {
        return this._EstimatedLiquidationRatio;
      }
      set {
        this._EstimatedLiquidationRatio = value;
      }
    }
    
    /// <summary>
    /// <para>Map of Estimated Liquidation Ratio per index, it is returned only for users without portfolio margining enabled. Multiplying it by future position&apos;s market price returns its estimated liquidation price.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("estimated_liquidation_ratio_map")]
    public JObject? EstimatedLiquidationRatioMap {
      get {
        return this._EstimatedLiquidationRatioMap;
      }
      set {
        this._EstimatedLiquidationRatioMap = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s fee balance (it can be used to pay for fees)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_balance")]
    public decimal FeeBalance {
      get {
        return this._FeeBalance;
      }
      set {
        this._FeeBalance = value;
      }
    }
    
    /// <summary>
    /// <para>Futures profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_pl")]
    public decimal FuturesPl {
      get {
        return this._FuturesPl;
      }
      set {
        this._FuturesPl = value;
      }
    }
    
    /// <summary>
    /// <para>Futures session realized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_session_rpl")]
    public decimal FuturesSessionRpl {
      get {
        return this._FuturesSessionRpl;
      }
      set {
        this._FuturesSessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>Futures session unrealized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("futures_session_upl")]
    public decimal FuturesSessionUpl {
      get {
        return this._FuturesSessionUpl;
      }
      set {
        this._FuturesSessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("initial_margin")]
    public decimal InitialMargin {
      get {
        return this._InitialMargin;
      }
      set {
        this._InitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>The maintenance margin.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("maintenance_margin")]
    public decimal MaintenanceMargin {
      get {
        return this._MaintenanceMargin;
      }
      set {
        this._MaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>The account&apos;s margin balance</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("margin_balance")]
    public decimal MarginBalance {
      get {
        return this._MarginBalance;
      }
      set {
        this._MarginBalance = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary delta</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_delta")]
    public decimal OptionsDelta {
      get {
        return this._OptionsDelta;
      }
      set {
        this._OptionsDelta = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary gamma</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_gamma")]
    public decimal OptionsGamma {
      get {
        return this._OptionsGamma;
      }
      set {
        this._OptionsGamma = value;
      }
    }
    
    /// <summary>
    /// <para>Options profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_pl")]
    public decimal OptionsPl {
      get {
        return this._OptionsPl;
      }
      set {
        this._OptionsPl = value;
      }
    }
    
    /// <summary>
    /// <para>Options session realized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_session_rpl")]
    public decimal OptionsSessionRpl {
      get {
        return this._OptionsSessionRpl;
      }
      set {
        this._OptionsSessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>Options session unrealized profit and Loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_session_upl")]
    public decimal OptionsSessionUpl {
      get {
        return this._OptionsSessionUpl;
      }
      set {
        this._OptionsSessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary theta</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_theta")]
    public decimal OptionsTheta {
      get {
        return this._OptionsTheta;
      }
      set {
        this._OptionsTheta = value;
      }
    }
    
    /// <summary>
    /// <para>Options value</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_value")]
    public decimal OptionsValue {
      get {
        return this._OptionsValue;
      }
      set {
        this._OptionsValue = value;
      }
    }
    
    /// <summary>
    /// <para>Options summary vega</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("options_vega")]
    public decimal OptionsVega {
      get {
        return this._OptionsVega;
      }
      set {
        this._OptionsVega = value;
      }
    }
    
    /// <summary>
    /// <para>When <c>true</c> portfolio margining is enabled for user</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("portfolio_margining_enabled")]
    public bool PortfolioMarginingEnabled {
      get {
        return this._PortfolioMarginingEnabled;
      }
      set {
        this._PortfolioMarginingEnabled = value;
      }
    }
    
    /// <summary>
    /// <para>The sum of position deltas without positions that will expire during closest expiration</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_delta_total")]
    public decimal ProjectedDeltaTotal {
      get {
        return this._ProjectedDeltaTotal;
      }
      set {
        this._ProjectedDeltaTotal = value;
      }
    }
    
    /// <summary>
    /// <para>Projected initial margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_initial_margin")]
    public decimal ProjectedInitialMargin {
      get {
        return this._ProjectedInitialMargin;
      }
      set {
        this._ProjectedInitialMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Projected maintenance margin</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("projected_maintenance_margin")]
    public decimal ProjectedMaintenanceMargin {
      get {
        return this._ProjectedMaintenanceMargin;
      }
      set {
        this._ProjectedMaintenanceMargin = value;
      }
    }
    
    /// <summary>
    /// <para>Session realized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_rpl")]
    public decimal SessionRpl {
      get {
        return this._SessionRpl;
      }
      set {
        this._SessionRpl = value;
      }
    }
    
    /// <summary>
    /// <para>Session unrealized profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("session_upl")]
    public decimal SessionUpl {
      get {
        return this._SessionUpl;
      }
      set {
        this._SessionUpl = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("total_pl")]
    public decimal TotalPl {
      get {
        return this._TotalPl;
      }
      set {
        this._TotalPl = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _AvailableWithdrawalFunds;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Balance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Currency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _DeltaTotal;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private JObject _DeltaTotalMap = null!;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Equity;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _EstimatedLiquidationRatio;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private JObject? _EstimatedLiquidationRatioMap;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FeeBalance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesSessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _FuturesSessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _InitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarginBalance;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsDelta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsGamma;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsPl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsSessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsSessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsTheta;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsValue;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _OptionsVega;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _PortfolioMarginingEnabled;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedDeltaTotal;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedInitialMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProjectedMaintenanceMargin;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionRpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _SessionUpl;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _TotalPl;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTradesInstrumentNameIntervalResponse {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>User&apos;s fee in units of the specified <c>fee_currency</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_currency")]
    public string FeeCurrency {
      get {
        return this._FeeCurrency;
      }
      set {
        this._FeeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (presented only when previously set for order by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Describes what was role of users order: <c>&quot;M&quot;</c> when it was maker order, <c>&quot;T&quot;</c> when it was taker order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidity")]
    public string Liquidity {
      get {
        return this._Liquidity;
      }
      set {
        this._Liquidity = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Always <c>null</c>, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("matching_id")]
    public string MatchingId {
      get {
        return this._MatchingId;
      }
      set {
        this._MatchingId = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the user order (maker or taker), i.e. subscriber&apos;s order id that took part in the trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit</c>, <c>&quot;market&quot;</c>, or <c>&quot;liquidation&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is post-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public string PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is reduce-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public string ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("self_trade")]
    public bool SelfTrade {
      get {
        return this._SelfTrade;
      }
      set {
        this._SelfTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c> or <c>&quot;archive&quot;</c> (if order was archived)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (Options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _FeeCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Liquidity = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MatchingId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PostOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ReduceOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SelfTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
  
  /// <summary>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTradesKindCurrencyIntervalResponse {
    
    /// <summary>
    /// <para>Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("amount")]
    public decimal Amount {
      get {
        return this._Amount;
      }
      set {
        this._Amount = value;
      }
    }
    
    /// <summary>
    /// <para>Block trade id - when trade was part of block trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("block_trade_id")]
    public string BlockTradeId {
      get {
        return this._BlockTradeId;
      }
      set {
        this._BlockTradeId = value;
      }
    }
    
    /// <summary>
    /// <para>Direction: <c>buy</c>, or <c>sell</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("direction")]
    public string Direction {
      get {
        return this._Direction;
      }
      set {
        this._Direction = value;
      }
    }
    
    /// <summary>
    /// <para>User&apos;s fee in units of the specified <c>fee_currency</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee")]
    public decimal Fee {
      get {
        return this._Fee;
      }
      set {
        this._Fee = value;
      }
    }
    
    /// <summary>
    /// <para>Currency, i.e <c>&quot;BTC&quot;</c>, <c>&quot;ETH&quot;</c>, <c>&quot;USDC&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("fee_currency")]
    public string FeeCurrency {
      get {
        return this._FeeCurrency;
      }
      set {
        this._FeeCurrency = value;
      }
    }
    
    /// <summary>
    /// <para>Index Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("index_price")]
    public decimal IndexPrice {
      get {
        return this._IndexPrice;
      }
      set {
        this._IndexPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Unique instrument identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("instrument_name")]
    public string InstrumentName {
      get {
        return this._InstrumentName;
      }
      set {
        this._InstrumentName = value;
      }
    }
    
    /// <summary>
    /// <para>Option implied volatility for the price (Option only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("iv")]
    public System.Decimal? Iv {
      get {
        return this._Iv;
      }
      set {
        this._Iv = value;
      }
    }
    
    /// <summary>
    /// <para>User defined label (presented only when previously set for order by user)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("label")]
    public string Label {
      get {
        return this._Label;
      }
      set {
        this._Label = value;
      }
    }
    
    /// <summary>
    /// <para>Optional field (only for trades caused by liquidation): <c>&quot;M&quot;</c> when maker side of trade was under liquidation, <c>&quot;T&quot;</c> when taker side was under liquidation, <c>&quot;MT&quot;</c> when both sides of trade were under liquidation</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidation")]
    public System.String? Liquidation {
      get {
        return this._Liquidation;
      }
      set {
        this._Liquidation = value;
      }
    }
    
    /// <summary>
    /// <para>Describes what was role of users order: <c>&quot;M&quot;</c> when it was maker order, <c>&quot;T&quot;</c> when it was taker order</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("liquidity")]
    public string Liquidity {
      get {
        return this._Liquidity;
      }
      set {
        this._Liquidity = value;
      }
    }
    
    /// <summary>
    /// <para>Mark Price at the moment of trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("mark_price")]
    public decimal MarkPrice {
      get {
        return this._MarkPrice;
      }
      set {
        this._MarkPrice = value;
      }
    }
    
    /// <summary>
    /// <para>Always <c>null</c>, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("matching_id")]
    public string MatchingId {
      get {
        return this._MatchingId;
      }
      set {
        this._MatchingId = value;
      }
    }
    
    /// <summary>
    /// <para>Id of the user order (maker or taker), i.e. subscriber&apos;s order id that took part in the trade</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_id")]
    public string OrderId {
      get {
        return this._OrderId;
      }
      set {
        this._OrderId = value;
      }
    }
    
    /// <summary>
    /// <para>Order type: <c>&quot;limit</c>, <c>&quot;market&quot;</c>, or <c>&quot;liquidation&quot;</c></para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("order_type")]
    public string OrderType {
      get {
        return this._OrderType;
      }
      set {
        this._OrderType = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is post-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("post_only")]
    public string PostOnly {
      get {
        return this._PostOnly;
      }
      set {
        this._PostOnly = value;
      }
    }
    
    /// <summary>
    /// <para>Price in base currency</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("price")]
    public decimal Price {
      get {
        return this._Price;
      }
      set {
        this._Price = value;
      }
    }
    
    /// <summary>
    /// <para>Profit and loss in base currency.</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("profit_loss")]
    public decimal ProfitLoss {
      get {
        return this._ProfitLoss;
      }
      set {
        this._ProfitLoss = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if user order is reduce-only</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("reduce_only")]
    public string ReduceOnly {
      get {
        return this._ReduceOnly;
      }
      set {
        this._ReduceOnly = value;
      }
    }
    
    /// <summary>
    /// <para><c>true</c> if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("self_trade")]
    public bool SelfTrade {
      get {
        return this._SelfTrade;
      }
      set {
        this._SelfTrade = value;
      }
    }
    
    /// <summary>
    /// <para>Order state: <c>&quot;open&quot;</c>, <c>&quot;filled&quot;</c>, <c>&quot;rejected&quot;</c>, <c>&quot;cancelled&quot;</c>, <c>&quot;untriggered&quot;</c> or <c>&quot;archive&quot;</c> (if order was archived)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("state")]
    public string State {
      get {
        return this._State;
      }
      set {
        this._State = value;
      }
    }
    
    /// <summary>
    /// <para>Direction of the &quot;tick&quot; (<c>0</c> = Plus Tick, <c>1</c> = Zero-Plus Tick, <c>2</c> = Minus Tick, <c>3</c> = Zero-Minus Tick).</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("tick_direction")]
    public int TickDirection {
      get {
        return this._TickDirection;
      }
      set {
        this._TickDirection = value;
      }
    }
    
    /// <summary>
    /// <para>The timestamp of the trade (milliseconds since the UNIX epoch)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
    [Newtonsoft.Json.JsonConverter(typeof(MillisecondsTimestampConverter))]
    public DateTime Timestamp {
      get {
        return this._Timestamp;
      }
      set {
        this._Timestamp = value;
      }
    }
    
    /// <summary>
    /// <para>Unique (per currency) trade identifier</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_id")]
    public string TradeId {
      get {
        return this._TradeId;
      }
      set {
        this._TradeId = value;
      }
    }
    
    /// <summary>
    /// <para>The sequence number of the trade within instrument</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("trade_seq")]
    public int TradeSeq {
      get {
        return this._TradeSeq;
      }
      set {
        this._TradeSeq = value;
      }
    }
    
    /// <summary>
    /// <para>Underlying price for implied volatility calculations (Options only)</para>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Newtonsoft.Json.JsonPropertyAttribute("underlying_price")]
    public System.Decimal? UnderlyingPrice {
      get {
        return this._UnderlyingPrice;
      }
      set {
        this._UnderlyingPrice = value;
      }
    }
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Amount;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _BlockTradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Direction = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Fee;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _FeeCurrency = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _IndexPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _InstrumentName = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _Iv;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Label = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.String? _Liquidation;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _Liquidity = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _MarkPrice;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _MatchingId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _OrderType = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _PostOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _Price;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private decimal _ProfitLoss;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _ReduceOnly = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private bool _SelfTrade;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _State = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TickDirection;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private DateTime _Timestamp;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private string _TradeId = string.Empty;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private int _TradeSeq;
    
    [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
    private System.Decimal? _UnderlyingPrice;
  }
}
