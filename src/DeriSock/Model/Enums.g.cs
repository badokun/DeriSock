// --------------------------------------------------------------------------
// <auto-generated>
//      This code was generated by a tool.
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------
#pragma warning disable CS1591
#nullable enable
namespace DeriSock.Model {
  
  
  /// <summary>
  /// <para>Method of authentication</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class GrantType : DeriSock.Model.EnumValue {
    
    public static GrantType ClientCredentials = new GrantType("client_credentials");
    
    public static GrantType ClientSignature = new GrantType("client_signature");
    
    public static GrantType RefreshToken = new GrantType("refresh_token");
    
    private GrantType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - <c>connection</c>)</para>
  /// <para><b>NOTICE:</b> Scope <c>connection</c> can be used only when working via Websocket.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class ConnectionScope : DeriSock.Model.EnumValue {
    
    public static ConnectionScope Connection = new ConnectionScope("connection");
    
    public static ConnectionScope Account = new ConnectionScope("account");
    
    private ConnectionScope(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>The value &quot;exception&quot; will trigger an error response. This may be useful for testing wrapper libraries.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TestExpectedResult : DeriSock.Model.EnumValue {
    
    public static TestExpectedResult None = new TestExpectedResult("");
    
    public static TestExpectedResult Exception = new TestExpectedResult("exception");
    
    private TestExpectedResult(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>The currency symbol</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class CurrencySymbol : DeriSock.Model.EnumValue {
    
    public static CurrencySymbol BTC = new CurrencySymbol("BTC");
    
    public static CurrencySymbol ETH = new CurrencySymbol("ETH");
    
    public static CurrencySymbol SOL = new CurrencySymbol("SOL");
    
    public static CurrencySymbol USDC = new CurrencySymbol("USDC");
    
    private CurrencySymbol(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Kind filter on positions</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class InstrumentKind : DeriSock.Model.EnumValue {
    
    public static InstrumentKind Future = new InstrumentKind("future");
    
    public static InstrumentKind Option = new InstrumentKind("option");
    
    private InstrumentKind(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>enable or disable login.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class LoginStatus : DeriSock.Model.EnumValue {
    
    public static LoginStatus Enable = new LoginStatus("enable");
    
    public static LoginStatus Disable = new LoginStatus("disable");
    
    private LoginStatus(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Describes if user wants to be maker or taker of trades</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradeRole : DeriSock.Model.EnumValue {
    
    public static TradeRole Maker = new TradeRole("maker");
    
    public static TradeRole Taker = new TradeRole("taker");
    
    private TradeRole(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Direction of trade from the maker perspective</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TradeDirection : DeriSock.Model.EnumValue {
    
    public static TradeDirection Buy = new TradeDirection("buy");
    
    public static TradeDirection Sell = new TradeDirection("sell");
    
    private TradeDirection(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>The order type, default: <c>&quot;limit&quot;</c></para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class BuySellOrderType : DeriSock.Model.EnumValue {
    
    public static BuySellOrderType Limit = new BuySellOrderType("limit");
    
    public static BuySellOrderType StopLimit = new BuySellOrderType("stop_limit");
    
    public static BuySellOrderType TakeLimit = new BuySellOrderType("take_limit");
    
    public static BuySellOrderType Market = new BuySellOrderType("market");
    
    public static BuySellOrderType StopMarket = new BuySellOrderType("stop_market");
    
    public static BuySellOrderType TakeMarket = new BuySellOrderType("take_market");
    
    public static BuySellOrderType MarketLimit = new BuySellOrderType("market_limit");
    
    public static BuySellOrderType TrailingStop = new BuySellOrderType("trailing_stop");
    
    private BuySellOrderType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Specifies how long the order remains in effect. Default <c>&quot;good_til_cancelled&quot;</c></para>
  /// <para>- <c>&quot;good_til_cancelled&quot;</c> - unfilled order remains in order book until cancelled</para>
  /// <para>- <c>&quot;good_til_day&quot;</c> - unfilled order remains in order book till the end of the trading session</para>
  /// <para>- <c>&quot;fill_or_kill&quot;</c> - execute a transaction immediately and completely or not at all</para>
  /// <para>- <c>&quot;immediate_or_cancel&quot;</c> - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TimeInForce : DeriSock.Model.EnumValue {
    
    public static TimeInForce GoodTilCancelled = new TimeInForce("good_til_cancelled");
    
    public static TimeInForce GoodTilDay = new TimeInForce("good_til_day");
    
    public static TimeInForce FillOrKill = new TimeInForce("fill_or_kill");
    
    public static TimeInForce ImmediateOrCancel = new TimeInForce("immediate_or_cancel");
    
    private TimeInForce(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Defines the trigger type. Required for <c>&quot;Stop-Loss&quot;</c>, <c>&quot;Take-Profit&quot;</c> and <c>&quot;Trailing&quot;</c> trigger orders</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class TriggerType : DeriSock.Model.EnumValue {
    
    public static TriggerType IndexPrice = new TriggerType("index_price");
    
    public static TriggerType MarkPrice = new TriggerType("mark_price");
    
    public static TriggerType LastPrice = new TriggerType("last_price");
    
    private TriggerType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Advanced option order type. (Only for options)</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class AdvancedOptionOrderType : DeriSock.Model.EnumValue {
    
    public static AdvancedOptionOrderType Usd = new AdvancedOptionOrderType("usd");
    
    public static AdvancedOptionOrderType Implv = new AdvancedOptionOrderType("implv");
    
    private AdvancedOptionOrderType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Order type - <c>limit</c>, <c>stop</c>, <c>take</c>, <c>trigger_all</c> or <c>all</c>, default - <c>all</c></para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class CancelOrderType : DeriSock.Model.EnumValue {
    
    public static CancelOrderType All = new CancelOrderType("all");
    
    public static CancelOrderType Limit = new CancelOrderType("limit");
    
    public static CancelOrderType TriggerAll = new CancelOrderType("trigger_all");
    
    public static CancelOrderType Stop = new CancelOrderType("stop");
    
    public static CancelOrderType Take = new CancelOrderType("take");
    
    public static CancelOrderType TrailingStop = new CancelOrderType("trailing_stop");
    
    private CancelOrderType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>The order type</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class ClosePositionOrderType : DeriSock.Model.EnumValue {
    
    public static ClosePositionOrderType Limit = new ClosePositionOrderType("limit");
    
    public static ClosePositionOrderType Market = new ClosePositionOrderType("market");
    
    private ClosePositionOrderType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Order type, default - <c>all</c></para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class OpenOrderType : DeriSock.Model.EnumValue {
    
    public static OpenOrderType All = new OpenOrderType("all");
    
    public static OpenOrderType Limit = new OpenOrderType("limit");
    
    public static OpenOrderType TriggerAll = new OpenOrderType("trigger_all");
    
    public static OpenOrderType StopAll = new OpenOrderType("stop_all");
    
    public static OpenOrderType StopLimit = new OpenOrderType("stop_limit");
    
    public static OpenOrderType StopMarket = new OpenOrderType("stop_market");
    
    public static OpenOrderType TakeAll = new OpenOrderType("take_all");
    
    public static OpenOrderType TakeLimit = new OpenOrderType("take_limit");
    
    public static OpenOrderType TakeMarket = new OpenOrderType("take_market");
    
    public static OpenOrderType TrailingAll = new OpenOrderType("trailing_all");
    
    public static OpenOrderType TrailingStop = new OpenOrderType("trailing_stop");
    
    private OpenOrderType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Direction of results sorting (<c>default</c> value means no sorting, results will be returned in order in which they left the database)</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class UserTradeSortDirection : DeriSock.Model.EnumValue {
    
    public static UserTradeSortDirection Asc = new UserTradeSortDirection("asc");
    
    public static UserTradeSortDirection Desc = new UserTradeSortDirection("desc");
    
    public static UserTradeSortDirection Default = new UserTradeSortDirection("default");
    
    private UserTradeSortDirection(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Settlement type</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class SettlementType : DeriSock.Model.EnumValue {
    
    public static SettlementType Settlement = new SettlementType("settlement");
    
    public static SettlementType Delivery = new SettlementType("delivery");
    
    public static SettlementType Bankruptcy = new SettlementType("bankruptcy");
    
    private SettlementType(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Index identifier, matches (base) cryptocurrency with quote currency</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class IndexName : DeriSock.Model.EnumValue {
    
    public static IndexName AdaUsd = new IndexName("ada_usd");
    
    public static IndexName AvaxUsd = new IndexName("avax_usd");
    
    public static IndexName BtcUsd = new IndexName("btc_usd");
    
    public static IndexName EthUsd = new IndexName("eth_usd");
    
    public static IndexName DotUsd = new IndexName("dot_usd");
    
    public static IndexName LunaUsd = new IndexName("luna_usd");
    
    public static IndexName MaticUsd = new IndexName("matic_usd");
    
    public static IndexName SolUsd = new IndexName("sol_usd");
    
    public static IndexName UsdcUsd = new IndexName("usdc_usd");
    
    public static IndexName XrpUsd = new IndexName("xrp_usd");
    
    public static IndexName AdaUsdc = new IndexName("ada_usdc");
    
    public static IndexName AvaxUsdc = new IndexName("avax_usdc");
    
    public static IndexName BtcUsdc = new IndexName("btc_usdc");
    
    public static IndexName EthUsdc = new IndexName("eth_usdc");
    
    public static IndexName DotUsdc = new IndexName("dot_usdc");
    
    public static IndexName LunaUsdc = new IndexName("luna_usdc");
    
    public static IndexName MaticUsdc = new IndexName("matic_usdc");
    
    public static IndexName SolUsdc = new IndexName("sol_usdc");
    
    public static IndexName XrpUsdc = new IndexName("xrp_usdc");
    
    public static IndexName BtcdvolUsdc = new IndexName("btcdvol_usdc");
    
    public static IndexName EthdvolUsdc = new IndexName("ethdvol_usdc");
    
    private IndexName(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Specifies time period. <c>8h</c> - 8 hours, <c>24h</c> - 24 hours, <c>1m</c> - 1 month</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class FundingChartPeriod : DeriSock.Model.EnumValue {
    
    public static FundingChartPeriod _8H = new FundingChartPeriod("8h");
    
    public static FundingChartPeriod _24H = new FundingChartPeriod("24h");
    
    public static FundingChartPeriod _1M = new FundingChartPeriod("1m");
    
    private FundingChartPeriod(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Chart bars resolution given in full minutes or keyword <c>1D</c> (only some specific resolutions are supported)</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class ChartBarResolution : DeriSock.Model.EnumValue {
    
    public static ChartBarResolution _1 = new ChartBarResolution("1");
    
    public static ChartBarResolution _3 = new ChartBarResolution("3");
    
    public static ChartBarResolution _5 = new ChartBarResolution("5");
    
    public static ChartBarResolution _10 = new ChartBarResolution("10");
    
    public static ChartBarResolution _15 = new ChartBarResolution("15");
    
    public static ChartBarResolution _30 = new ChartBarResolution("30");
    
    public static ChartBarResolution _60 = new ChartBarResolution("60");
    
    public static ChartBarResolution _120 = new ChartBarResolution("120");
    
    public static ChartBarResolution _180 = new ChartBarResolution("180");
    
    public static ChartBarResolution _360 = new ChartBarResolution("360");
    
    public static ChartBarResolution _720 = new ChartBarResolution("720");
    
    public static ChartBarResolution _1D = new ChartBarResolution("1D");
    
    private ChartBarResolution(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Time resolution given in full seconds or keyword <c>1D</c> (only some specific resolutions are supported)</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class VolatilityIndexResolution : DeriSock.Model.EnumValue {
    
    public static VolatilityIndexResolution _1 = new VolatilityIndexResolution("1");
    
    public static VolatilityIndexResolution _60 = new VolatilityIndexResolution("60");
    
    public static VolatilityIndexResolution _3600 = new VolatilityIndexResolution("3600");
    
    public static VolatilityIndexResolution _43200 = new VolatilityIndexResolution("43200");
    
    public static VolatilityIndexResolution _1D = new VolatilityIndexResolution("1D");
    
    private VolatilityIndexResolution(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Withdrawal priority, optional for BTC, default: <c>high</c></para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class WithdrawPriority : DeriSock.Model.EnumValue {
    
    public static WithdrawPriority Insane = new WithdrawPriority("insane");
    
    public static WithdrawPriority ExtremeHigh = new WithdrawPriority("extreme_high");
    
    public static WithdrawPriority VeryHigh = new WithdrawPriority("very_high");
    
    public static WithdrawPriority High = new WithdrawPriority("high");
    
    public static WithdrawPriority Mid = new WithdrawPriority("mid");
    
    public static WithdrawPriority Low = new WithdrawPriority("low");
    
    public static WithdrawPriority VeryLow = new WithdrawPriority("very_low");
    
    private WithdrawPriority(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Group prices (by rounding). Use <c>none</c> for no grouping.</para>
  /// <para>For ETH cryptocurrency, real <c>group</c> is divided by 100.0, e.g. given value <c>5</c> means using <c>0.05</c></para>
  /// <para>Allowed values for BTC - <c>none</c>, <c>1</c>, <c>2</c>, <c>5</c>, <c>10</c></para>
  /// <para>Allowed values for ETH - <c>none</c>, <c>5</c>, <c>10</c>, <c>25</c>, <c>100</c>, <c>250</c></para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PriceGrouping : DeriSock.Model.EnumValue {
    
    public static PriceGrouping None = new PriceGrouping("none");
    
    public static PriceGrouping _1 = new PriceGrouping("1");
    
    public static PriceGrouping _2 = new PriceGrouping("2");
    
    public static PriceGrouping _5 = new PriceGrouping("5");
    
    public static PriceGrouping _10 = new PriceGrouping("10");
    
    public static PriceGrouping _25 = new PriceGrouping("25");
    
    public static PriceGrouping _100 = new PriceGrouping("100");
    
    public static PriceGrouping _250 = new PriceGrouping("250");
    
    private PriceGrouping(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Number of price levels to be included.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class PriceLevelDepth : DeriSock.Model.EnumValue {
    
    public static PriceLevelDepth _1 = new PriceLevelDepth("1");
    
    public static PriceLevelDepth _10 = new PriceLevelDepth("10");
    
    public static PriceLevelDepth _20 = new PriceLevelDepth("20");
    
    private PriceLevelDepth(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class NotificationInterval1 : DeriSock.Model.EnumValue {
    
    public static NotificationInterval1 _100Ms = new NotificationInterval1("100ms");
    
    private NotificationInterval1(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Frequency of notifications. Events will be aggregated over this interval.</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class NotificationInterval2 : DeriSock.Model.EnumValue {
    
    public static NotificationInterval2 _100Ms = new NotificationInterval2("100ms");
    
    public static NotificationInterval2 Raw = new NotificationInterval2("raw");
    
    private NotificationInterval2(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>Instrument kind or <c>&quot;any&quot;</c> for all</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class InstrumentKindOrAny : DeriSock.Model.EnumValue {
    
    public static InstrumentKindOrAny Future = new InstrumentKindOrAny("future");
    
    public static InstrumentKindOrAny Option = new InstrumentKindOrAny("option");
    
    public static InstrumentKindOrAny Any = new InstrumentKindOrAny("any");
    
    private InstrumentKindOrAny(string value) : 
        base(value) {
    }
  }
  
  /// <summary>
  /// <para>The currency symbol or <c>&quot;any&quot;</c> for all</para>
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial class CurrencySymbolOrAny : DeriSock.Model.EnumValue {
    
    public static CurrencySymbolOrAny BTC = new CurrencySymbolOrAny("BTC");
    
    public static CurrencySymbolOrAny ETH = new CurrencySymbolOrAny("ETH");
    
    public static CurrencySymbolOrAny SOL = new CurrencySymbolOrAny("SOL");
    
    public static CurrencySymbolOrAny USDC = new CurrencySymbolOrAny("USDC");
    
    public static CurrencySymbolOrAny Any = new CurrencySymbolOrAny("any");
    
    private CurrencySymbolOrAny(string value) : 
        base(value) {
    }
  }
}
