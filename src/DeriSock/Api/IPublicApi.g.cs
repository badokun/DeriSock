// --------------------------------------------------------------------------
// <auto-generated>
//      This code was generated by a tool.
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------
#pragma warning disable CS1591
#nullable enable
namespace DeriSock.Api {
  using System.Threading.Tasks;
  using DeriSock.JsonRpc;
  using DeriSock.Model;
  using System;
  using Newtonsoft.Json.Linq;
  
  
  [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
  public partial interface IPublicApi {
    
    /// <summary>
    /// <para>Generates token for new subject id. This method can be used to switch between subaccounts.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicExchangeTokenResponse>> PublicExchangeToken(PublicExchangeTokenRequest args);
    
    /// <summary>
    /// <para>Generates token for new named session. This method can be used only with session scoped tokens.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicForkTokenResponse>> PublicForkToken(PublicForkTokenRequest args);
    
    /// <summary>
    /// <para>Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send <c>heartbeat</c> messages and <c>test_request</c> messages. Your software should respond to <c>test_request</c> messages by sending a <c>/api/v2/public/test</c> request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<string>> PublicSetHeartbeat(PublicSetHeartbeatRequest args);
    
    /// <summary>
    /// <para>Stop sending heartbeat messages.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<string>> PublicDisableHeartbeat();
    
    /// <summary>
    /// <para>Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit&apos;s systems.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<DateTime>> PublicGetTime();
    
    /// <summary>
    /// <para>Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicHelloResponse>> PublicHello(PublicHelloRequest args);
    
    /// <summary>
    /// <para>Method used to get information about locked currencies</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicStatusResponse>> PublicStatus();
    
    /// <summary>
    /// <para>Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicTestResponse>> PublicTest(PublicTestRequest? args);
    
    /// <summary>
    /// <para>Retrieves announcements. Default &quot;start_timestamp&quot; parameter value is current timestamp, &quot;count&quot; parameter value must be between 1 and 50, default is 5.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetAnnouncementsResponse>> PublicGetAnnouncements(PublicGetAnnouncementsRequest? args);
    
    /// <summary>
    /// <para>Public version of the method calculates portfolio margin info for simulated position. For concrete user position, the private version of the method must be used. The public version of the request has special restricted rate limit (not more than once per a second for the IP).</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<JObject>> PublicGetPortfolioMargins(PublicGetPortfolioMarginsRequest args);
    
    /// <summary>
    /// <para>Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind).</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetBookSummaryByCurrencyResponse>> PublicGetBookSummaryByCurrency(PublicGetBookSummaryByCurrencyRequest args);
    
    /// <summary>
    /// <para>Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetBookSummaryByInstrumentResponse>> PublicGetBookSummaryByInstrument(PublicGetBookSummaryByInstrumentRequest args);
    
    /// <summary>
    /// <para>Retrieves contract size of provided instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetContractSizeResponse>> PublicGetContractSize(PublicGetContractSizeRequest args);
    
    /// <summary>
    /// <para>Retrieves all cryptocurrencies supported by the API.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetCurrenciesResponse>> PublicGetCurrencies();
    
    /// <summary>
    /// <para>Retrieves delivery prices for then given index</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetDeliveryPricesResponse>> PublicGetDeliveryPrices(PublicGetDeliveryPricesRequest args);
    
    /// <summary>
    /// <para>Retrieve the latest user trades that have occurred for PERPETUAL instruments in a specific currency symbol and within given time range.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetFundingChartDataResponse>> PublicGetFundingChartData(PublicGetFundingChartDataRequest args);
    
    /// <summary>
    /// <para>Retrieves hourly historical interest rate for requested PERPETUAL instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetFundingRateHistoryResponse>> PublicGetFundingRateHistory(PublicGetFundingRateHistoryRequest args);
    
    /// <summary>
    /// <para>Retrieves interest rate value for requested period. Applicable only for PERPETUAL instruments.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<double>> PublicGetFundingRateValue(PublicGetFundingRateValueRequest args);
    
    /// <summary>
    /// <para>Provides information about historical volatility for given cryptocurrency.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<DeriSock.Model.TimestampValueItem[]>> PublicGetHistoricalVolatility(PublicGetHistoricalVolatilityRequest args);
    
    /// <summary>
    /// <para>Retrieves the current index price for the instruments, for the selected currency.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetIndexResponse>> PublicGetIndex(PublicGetIndexRequest args);
    
    /// <summary>
    /// <para>Retrieves the current index price value for given index name.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetIndexPriceResponse>> PublicGetIndexPrice(PublicGetIndexPriceRequest args);
    
    /// <summary>
    /// <para>Retrieves the identifiers of all supported Price Indexes</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<string[]>> PublicGetIndexPriceNames();
    
    /// <summary>
    /// <para>Retrieves information about instrument</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetInstrumentResponse>> PublicGetInstrument(PublicGetInstrumentRequest args);
    
    /// <summary>
    /// <para>Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have recently expired.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetInstrumentsResponse>> PublicGetInstruments(PublicGetInstrumentsRequest args);
    
    /// <summary>
    /// <para>Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within given currency.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastSettlementsByCurrencyResponse>> PublicGetLastSettlementsByCurrency(PublicGetLastSettlementsByCurrencyRequest args);
    
    /// <summary>
    /// <para>Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastSettlementsByInstrumentResponse>> PublicGetLastSettlementsByInstrument(PublicGetLastSettlementsByInstrumentRequest args);
    
    /// <summary>
    /// <para>Retrieve the latest trades that have occurred for instruments in a specific currency symbol.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastTradesByCurrencyResponse>> PublicGetLastTradesByCurrency(PublicGetLastTradesByCurrencyRequest args);
    
    /// <summary>
    /// <para>Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within given time range.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastTradesByCurrencyAndTimeResponse>> PublicGetLastTradesByCurrencyAndTime(PublicGetLastTradesByCurrencyAndTimeRequest args);
    
    /// <summary>
    /// <para>Retrieve the latest trades that have occurred for a specific instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastTradesByInstrumentResponse>> PublicGetLastTradesByInstrument(PublicGetLastTradesByInstrumentRequest args);
    
    /// <summary>
    /// <para>Retrieve the latest trades that have occurred for a specific instrument and within given time range.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetLastTradesByInstrumentAndTimeResponse>> PublicGetLastTradesByInstrumentAndTime(PublicGetLastTradesByInstrumentAndTimeRequest args);
    
    /// <summary>
    /// <para>Public request for 5min history of markprice values for the instrument. For now the markprice history is available only for a subset of options which take part in the volatility index calculations. All other instruments, futures and perpetuals will return empty list.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<DeriSock.Model.TimestampValueItem[]>> PublicGetMarkPriceHistory(PublicGetMarkPriceHistoryRequest args);
    
    /// <summary>
    /// <para>Retrieves the order book, along with other market values for a given instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetOrderBookResponse>> PublicGetOrderBook(PublicGetOrderBookRequest args);
    
    /// <summary>
    /// <para>Retrieves the order book, along with other market values for a given instrument ID.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetOrderBookByInstrumentIdResponse>> PublicGetOrderBookByInstrumentId(PublicGetOrderBookByInstrumentIdRequest args);
    
    /// <summary>
    /// <para>Retrieve active RFQs for instruments in given currency.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetRfqsResponse>> PublicGetRfqs(PublicGetRfqsRequest args);
    
    /// <summary>
    /// <para>Retrieves aggregated 24h trade volumes for different instrument types and currencies.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetTradeVolumesResponse>> PublicGetTradeVolumes(PublicGetTradeVolumesRequest? args);
    
    /// <summary>
    /// <para>Publicly available market data used to generate a TradingView candle chart.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetTradingviewChartDataResponse>> PublicGetTradingviewChartData(PublicGetTradingviewChartDataRequest args);
    
    /// <summary>
    /// <para>Public market data request for volatility index candles.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicGetVolatilityIndexDataResponse>> PublicGetVolatilityIndexData(PublicGetVolatilityIndexDataRequest args);
    
    /// <summary>
    /// <para>Get ticker for an instrument.</para>
    /// </summary>
    /// <param name="args"></param>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("DeriSock.DevTools", "0.3.5")]
    System.Threading.Tasks.Task<DeriSock.JsonRpc.JsonRpcResponse<PublicTickerResponse>> PublicTicker(PublicTickerRequest args);
  }
}
